{namespace renders}

import {AcceleratorSpec,ApplicationStatusSpec,DeployInputField,DeployInputSpec,DiskSpec,FirewallRuleSpec,GceMetadataItem,GceStartupScriptSpec,GcpAuthScopeSpec,IpForwardingSpec,LocalSsdSpec,MachineTypeSpec,NetworkInterfacesSpec,ImageSpec,PasswordSpec,StackdriverSpec,VmTierSpec,ZoneSpec} from 'java/com/google/cloud/deploymentmanager/autogen/deployment_package_autogen_spec.proto';
import * as utilities from 'com/google/cloud/deploymentmanager/autogen/templates/dm/utilities.soy';

/** Constructs all firewall resources. */
{template firewallResources kind="text"}
{@param specList: list<FirewallRuleSpec>}
{@param? tierSpec: VmTierSpec}
{for $spec in $specList}
{call firewallResource}{param spec: $spec/}{param tierSpec: $tierSpec/}{/call}
{/for}
{/template}


/** Constructs a firewall resource. */
{template firewallResource kind="text" /* visibility="private" */}
{@param spec: FirewallRuleSpec}
{@param? tierSpec: VmTierSpec}
/* Note that prop names don't take into account the tier. */
{let $propName kind="text"}
  {call utilities.firewallRulePropName}{param spec: $spec/}{param tierSpec: null/}{/call}
{/let}
{let $source kind="text"}
  {call firewallRuleSource}{param spec: $spec/}{param tierSpec: $tierSpec/}{/call}
{/let}
{% if properties["{$propName}"] %}
- name: {call utilities.firewallRuleName data="all"/}
  type: compute.v1.firewall
  properties:
    network: {{ networks[0] }}
    {$source |indent: 4}
    targetTags: ["{call utilities.firewallRuleTargetTag data="all"/}"]
    allowed:
      - IPProtocol: {call utilities.firewallRuleProtocol}{param spec: $spec/}{/call}
        {if $spec.getPort().length > 0}
        ports: ["{$spec.getPort()}"]
        {/if}
{% endif %}
{/template}


/** Source for firewall rule with source Traffic.Public */
{template firewallRuleSpecPublicSource kind="text"}
{@param spec: FirewallRuleSpec}
{let $sourcesPropName kind="text"}
  {call utilities.firewallRuleSourceRangesPropName}{param spec: $spec/}{param tierSpec: null/}{/call}
{/let}
{% if properties.get("{$sourcesPropName}") %}
sourceRanges:
  {% for source in properties["{$sourcesPropName}"].split(',') %}
  - '{{ source | trim }}'
  {% endfor %}
{% else %}
sourceRanges: ["0.0.0.0/0"]
{% endif %}{nil}
{/template}


/*
 * Produces source information for firewall rule according Traffic enum in allowedSource.
 */
{template firewallRuleSource kind="text"}
  {@param spec: FirewallRuleSpec}
  {@param? tierSpec: VmTierSpec}
  {switch $spec.getAllowedSource()}
    {case FirewallRuleSpec.TrafficSource.PUBLIC}
      {call firewallRuleSpecPublicSource data="all"/}
    {case FirewallRuleSpec.TrafficSource.TIER}
      {call firewallRuleSpecTierSource data="all"/}
    {case FirewallRuleSpec.TrafficSource.DEPLOYMENT}
      {call firewallRuleSpecDeploymentSource data="all"/}
  {/switch}
{/template}


/** Source for firewall rule with source Traffic.Tier */
{template firewallRuleSpecTierSource kind="text"}
{@param? tierSpec: VmTierSpec}
{if $tierSpec}
sourceTags:
  - {call utilities.tierTag data="all"} {param spec: $tierSpec /}{/call}{nil}
{/if}
{/template}


/** Source for firewall rule with source Traffic.Deployment */
{template firewallRuleSpecDeploymentSource kind="text"}
{@param? tierSpec: VmTierSpec}
{if $tierSpec}
sourceTags:
  - {{ env["deployment"] }}-deployment{nil}
{/if}
{/template}


/** Creates Firewall check box and range input field for a Firewall rule spec */
{template firewallProps kind="text"}
{@param spec: FirewallRuleSpec}
{@param? tierSpec: VmTierSpec}
{let $firewallPropName kind="text"}
  {call utilities.firewallRulePropName}{param spec: $spec/}{param tierSpec: $tierSpec/}{/call}
{/let}
{$firewallPropName}:
  type: boolean
  default: {if $spec.getDefaultOff()}False{else}True{/if}
  x-googleProperty:
    type: GCE_FIREWALL
    gceFirewall:
      networkProperty: {'network' |tierprefixed: $tierSpec}
{if $spec.getAllowedSource() == FirewallRuleSpec.TrafficSource.PUBLIC}
{call utilities.firewallRuleSourceRangesPropName}{param spec: $spec/}{param tierSpec: $tierSpec/}{/call}:
  type: string
  x-googleProperty:
    type: GCE_FIREWALL_RANGE
    gceFirewallRange:
      firewallProperty: {$firewallPropName}
{/if}
{/template}


/** Constructs password instance property */
{template passwordProperty kind="text"}
{@param password: PasswordSpec}
{@param passwordIndex: int}
{let $propertyName kind="text"}
  {call utilities.passwordPropertyName}{param passwordIndex: $passwordIndex/}{/call}
{/let}
{let $outputReference kind="text"}
  {call utilities.passwordResourceOutputReference}{param passwordIndex: $passwordIndex/}{/call}
{/let}
{call utilities.passwordConditional}
{param password: $password/}
{param conditionalContent kind="text"}
{$propertyName}: {$outputReference}
{/param}
{/call}
{/template}


/** Constructs password resource */
{template passwordResource kind="text"}
{@param password: PasswordSpec}
{@param passwordIndex: int}
{let $resourceName kind="text"}
  {call utilities.passwordResourceName}{param passwordIndex: $passwordIndex/}{/call}
{/let}
{call utilities.passwordConditional}
{param password: $password/}
{param conditionalContent kind="text"}
- name: {$resourceName}
  type: password.py
  properties:
    length: {$password.getLength()}
    includeSymbols: {if $password.getAllowSpecialChars()}True{else}False{/if}
{/param}
{/call}
{/template}


/** Constructs password output */
{template passwordOutput kind="text"}
{@param password: PasswordSpec}
{@param passwordIndex: int}
{let $outputReference kind="text"}
  {call utilities.passwordResourceOutputReference}{param passwordIndex: $passwordIndex/}{/call}
{/let}
{call utilities.passwordConditional}
{param password: $password/}
{param conditionalContent kind="text"}
- name: password{$passwordIndex}
  value: {$outputReference}
{/param}
{/call}
{/template}


/** Constructs password metadata entry */
{template passwordMetadataFromOutput kind="text"}
{@param password: PasswordSpec}
{@param passwordIndex: int}
{let $outputReference kind="text"}
  {call utilities.passwordResourceOutputReference}{param passwordIndex: $passwordIndex/}{/call}
{/let}
{call utilities.passwordConditional}
{param password: $password/}
{param conditionalContent kind="text"}
- key: {$password.getMetadataKey() |yamlprimitive: 12}
  value: {$outputReference}
{/param}
{/call}
{/template}


/** Constructs password property metadata entry */
{template passwordMetadataFromProperty kind="text"}
{@param password: PasswordSpec}
{@param passwordIndex: int}
{let $propertyName kind="text"}
  {call utilities.passwordPropertyName}{param passwordIndex: $passwordIndex/}{/call}
{/let}
{call utilities.passwordConditional}
{param password: $password/}
{param conditionalContent kind="text"}
- key: {$password.getMetadataKey() |yamlprimitive: 12}
  value: {{ properties["{$propertyName}"] }}
{/param}
{/call}
{/template}


/** Constructs password property schema entry */
{template passwordRequiredSchema kind="text"}
{@param password: PasswordSpec}
{@param passwordIndex: int}
{let $propertyName kind="text"}
  {call utilities.passwordPropertyName}{param passwordIndex: $passwordIndex/}{/call}
{/let}
{if not $password.getGenerateIf()}
- {$propertyName}
{/if}
{/template}


/** Constructs waiter resources. */
{template startupScriptAndWaiterResources kind="text"}
{@param? waiterSpec: ApplicationStatusSpec.WaiterSpec}
{@param? startupSpec: GceStartupScriptSpec}
{@param? enableJinjaVarName: string}
/*
 * Only one of the following should be specified:
 * - No dependencies
 * - dependsOnList
 * - Both dependsOnTierSpec and dependsOnTierInstanceCountJinjaVarName
 */
{@param? dependsOnList: list<string>}
{@param? dependsOnTierSpec: VmTierSpec}
{@param? dependsOnTierInstanceCountJinjaVarName: string}
{if $waiterSpec}

{if $enableJinjaVarName}
{% if {$enableJinjaVarName} %}
{/if}
{if $dependsOnTierInstanceCountJinjaVarName}
{% if {$dependsOnTierInstanceCountJinjaVarName} > 0 %}
{/if}

- name: software-status
  type: software_status.py
  properties:
    timeout: {$waiterSpec.getWaiterTimeoutSecs()}
    {if $dependsOnTierSpec}
    prefix: {{ env['deployment'] }}-{$dependsOnTierSpec.getName()}
    {/if}
    waiterDependsOn:
      {if $dependsOnList}
      {for $dependsOn in $dependsOnList}
      - {$dependsOn}
      {/for}
      {elseif $dependsOnTierSpec}
      {% for vmIndex in range({$dependsOnTierInstanceCountJinjaVarName}) %}
      - {call utilities.tierVmPrefix}{param spec: $dependsOnTierSpec/}{/call}-{{ vmIndex }}
      {% endfor %}
      {/if}

    {if $dependsOnList and length($dependsOnList) > 1}
    successNumber: {length($dependsOnList)}
    {elseif $dependsOnTierSpec}
    {% if {$dependsOnTierInstanceCountJinjaVarName} > 1 %}
    successNumber: {{ {$dependsOnTierInstanceCountJinjaVarName} }}
    {% endif %}
    {/if}

{if $waiterSpec.getScript()}
- name: software-status-script
  type: software_status_script.py

  properties:
    {if $startupSpec}
    initScript: |-
      {$startupSpec.getBashScriptContent() |indent: 6}
    {/if}
    {if $waiterSpec.getScript().getCheckScriptContent()}
    checkScript: |-
      {$waiterSpec.getScript().getCheckScriptContent() |indent: 6}
    {/if}
{/if}

{if $dependsOnTierInstanceCountJinjaVarName}
{% endif %}
{/if}
{if $enableJinjaVarName}
{% endif %}
{/if}

{/if}
{/template}


{template startupScriptAndWaiterMetadataItemsUnconditional kind="text"}
{@param? startupSpec: GceStartupScriptSpec}
{@param? waiterSpec: ApplicationStatusSpec.WaiterSpec}
{if $startupSpec?.getBashScriptContent() and not $waiterSpec?.getScript()}
- key: startup-script
  value: |-
    #!/bin/bash
    {$startupSpec?.getBashScriptContent() |indent: 4, false}
{/if}
{/template}


/**
 * Lists all metadata items for a startup script and waiter related configuration
 * that are included conditionally (depending on waiter being enabled or not).
 */
{template startupScriptAndWaiterMetadataItemsConditional kind="text"}
{@param? startupSpec: GceStartupScriptSpec}
{@param? waiterSpec: ApplicationStatusSpec.WaiterSpec}
{@param statusWaiterEnabled: bool}

{if $statusWaiterEnabled}

{if $waiterSpec}
- key: status-config-url
  value: $(ref.software-status.config-url)
- key: status-variable-path
  value: $(ref.software-status.variable-path)

{if $waiterSpec.getScript()}
- key: status-uptime-deadline
  value: {$waiterSpec.getScript().getCheckTimeoutSecs()}
{else}
- key: status-uptime-deadline
  value: {$waiterSpec.getWaiterTimeoutSecs()}
{/if}

{if $waiterSpec.getScript()}
// When the waiter script is defined, we use software_status_script.py resource
// to define the startup procedure.
- key: startup-script
  value: $(ref.software-status-script.startup-script)
{/if}

{if $waiterSpec.getScript()?.getDisableStartupScriptUrl()}
- key: startup-script-url
  value: ''
{/if}

{/if} // $waiterSpec

{else} // $statusWaiterEnabled

/* If startup script and waiter are defined, use the startup script directly
 * when waiter usage is disabled. */
{if $startupSpec?.getBashScriptContent() and $waiterSpec?.getScript()}
- key: startup-script
  value: |-
    #!/bin/bash
    {$startupSpec?.getBashScriptContent() |indent: 4, false}
{/if}

{/if} // $statusWaiterEnabled

{/template}


/** List all metadata items for GceMetadataItem specs. */
{template gceMetadataItems kind="text"}
{@param specList: list<GceMetadataItem>}
{@param? tierSpecList: list<VmTierSpec>}
{@param? deployInput: DeployInputSpec}
{for $metadata in $specList}
- key: {$metadata.getKey() |yamlprimitive: 2}

  {if $metadata.getValue()}
  value: {$metadata.getValue() |yamlprimitive: 2}

  {elseif $metadata.getTierVmNames()}
  {let $tierVmNames: $metadata.getTierVmNames()/}
  {let $tier: findVmTier($tierVmNames.getTier(), $tierSpecList)/}
  {let $vmPrefix kind="text"}{call utilities.tierVmPrefix}{param spec: $tier/}{/call}{/let}
  {let $instanceCount kind="text"}
    properties["{'instanceCount' |tierprefixed: $tier}"]{nil}
  {/let}

  {if $metadata.getTierVmNames().getAllVms()}
  {% set delimiter = joiner("{$metadata.getTierVmNames().getAllVms().getDelimiter() |doublequoted}") %}
  value: {% for vmIndex in range({$instanceCount}) -%}
    {{- delimiter() }}{$vmPrefix}-{{ vmIndex -}}
  {%- endfor %}

  {else}
  {let $vmIndex: $tierVmNames.getVmIndex() ?? 0/}
  {if $vmIndex >= 0}
  value: {$vmPrefix}-{$vmIndex}
  {else}
  value: {$vmPrefix}-{{ {$instanceCount} - {-$vmIndex} }}
  {/if}

  {/if /* $metadata.getTierVmNames().getAllVms() */}

  {elseif $metadata.getValueFromDeployInputField()}
  {let $field: findDeployInputField($metadata.getValueFromDeployInputField(), $deployInput)/}
  value: |-
         {{ properties["{deployInputFieldName($field)}"] }}

  {/if /* $metadata.value */}
{/for}
{/template}


/** Converts Stackdriver's properties to integer. */
{template stackdriverPropertiesJinja kind="text"}
{@param stackdriver: StackdriverSpec}
{if $stackdriver?.getLogging()}
{# Convert boolean type to integer. Stackdriver metadata items need value 0 or 1. #}
{% set enableStackdriverLogging = "1" if properties["enableStackdriverLogging"] else "0" %}
{/if}
{if $stackdriver?.getMonitoring()}
{# Convert boolean type to integer. Stackdriver metadata items need value 0 or 1. #}
{% set enableStackdriverMonitoring = "1" if properties["enableStackdriverMonitoring"] else "0" %}
{/if}
{/template}


/** Renders Stackdriver's properties in schema. */
{template stackdriverPropertiesSchema kind="text"}
{@param stackdriver: StackdriverSpec}
{if $stackdriver?.getLogging()}
enableStackdriverLogging:
  type: boolean
  default: {if $stackdriver?.getLogging()!.getDefaultOn()}True{else}False{/if}
{/if}
{if $stackdriver?.getMonitoring()}
enableStackdriverMonitoring:
  type: boolean
  default: {if $stackdriver?.getMonitoring()!.getDefaultOn()}True{else}False{/if}
{/if}
{/template}


/** Renders Stackdriver's metadata items. */
{template stackdriverMetadataItems kind="text"}
{@param? stackdriver: StackdriverSpec}
{if $stackdriver?.getLogging()}
- key: google-logging-enable
  value: {{ enableStackdriverLogging }}
{/if}
{if $stackdriver?.getMonitoring()}
- key: google-monitoring-enable
  value: {{ enableStackdriverMonitoring }}
{/if}
{/template}


/** Defines serviceAccounts section of a VM. */
{template serviceAccountsSection kind="text"}
{@param gcpAuthScopesList: list<GcpAuthScopeSpec>}
{@param? waiterSpec: ApplicationStatusSpec.WaiterSpec}
serviceAccounts:
  - email: default
    scopes:
      - 'https://www.googleapis.com/auth/cloud.useraccounts.readonly'
      - 'https://www.googleapis.com/auth/devstorage.read_only'
      - 'https://www.googleapis.com/auth/logging.write'
      - 'https://www.googleapis.com/auth/monitoring.write'

      {for $scope in $gcpAuthScopesList}
      {% if {call utilities.gcpAuthScopePropertyName}{param spec: $scope/}{/call} %}
      {let $url kind="text"}{call utilities.gcpAuthScopeUrl}{param spec: $scope/}{/call}{/let}
      - '{$url |quoted}'
      {% endif %}
      {/for}

      {if $waiterSpec}
      - 'https://www.googleapis.com/auth/cloudruntimeconfig'
      {/if}
{/template}


{template zonePropertySchema kind="text"}
{@param name: string}
{@param? zoneSpec: ZoneSpec}
{$name}:
  type: string
  {if $zoneSpec and $zoneSpec.getDefaultZone()}
  default: {$zoneSpec.getDefaultZone()}
  {/if}
  x-googleProperty:
    type: GCE_ZONE
    {if $zoneSpec and (length($zoneSpec.getWhitelistedZonesList()) > 0 or
      length($zoneSpec.getWhitelistedRegionsList()) > 0)}
    gceZone:
      {if length($zoneSpec.getWhitelistedZonesList()) > 0}
      whitelistedZones:
      {for $zone in $zoneSpec.getWhitelistedZonesList()}
      - {$zone}
      {/for}
      {/if}
      {if length($zoneSpec.getWhitelistedRegionsList()) > 0}
      whitelistedRegions:
      {for $region in $zoneSpec.getWhitelistedRegionsList()}
      - {$region}
      {/for}
      {/if}
    {/if}
{/template}


{template imagePropertySchema kind="text"}
{@param name: string}
{@param imagesList: list<ImageSpec>}
{@param? tier: VmTierSpec}
{$name |tierprefixed: $tier}:
  type: string
  enum:
    {for $image, $index in $imagesList}
    - 'projects/{$image.getProject()}/global/images/{$image.getName()}'
    {/for}
  default: 'projects/{$imagesList[0].getProject()}/global/images/{$imagesList[0].getName()}'
  x-googleProperty:
    type: GCE_DISK_IMAGE
{/template}


{template machineTypePropertySchema kind="text"}
{@param name: string}
{@param spec: MachineTypeSpec}
{@param? tier: VmTierSpec}
{$name |tierprefixed: $tier}:
  type: string
  default: {$spec.getDefaultMachineType()!.getGceMachineType()}
  x-googleProperty:
    type: GCE_MACHINE_TYPE
    zoneProperty: zone
    {if $spec.getMinimum()}
    gceMachineType:
      {if $spec.getMinimum().getCpu()}
      minCpu: {$spec.getMinimum().getCpu()}
      {/if}
      {if $spec.getMinimum().getRamGb()}
      minRamGb: {$spec.getMinimum().getRamGb()}
      {/if}
    {/if}
{/template}


{template acceleratorPropertiesSchema kind="text"}
{@param namePrefix: string}
{@param spec: AcceleratorSpec}
{@param? tier: VmTierSpec}
{$namePrefix + 'Type' |tierprefixed: $tier}:
  type: string
  default: {$spec.getDefaultType()}
  x-googleProperty:
    type: GCE_GPU_TYPE
    gceGpuType:
      machineTypeProperty: {'machineType' |tierprefixed: $tier}
      gpuType:
        {for $gpuType in $spec.getTypesList()}
        - {$gpuType}
        {/for}

{$namePrefix + 'Count' |tierprefixed: $tier}:
  type: integer
  default: {$spec.getDefaultCount() ?? 0}
  {if $spec.getMinCount() > 0}
  minimum: {$spec.getMinCount()}
  {/if}
  x-googleProperty:
    type: GCE_GPU_COUNT
    gceGpuCount:
      machineTypeProperty: {'machineType' |tierprefixed: $tier}
{/template}


{template networkPropertiesSchema kind="text"}
{@param nameSuffix: string}
{@param zonePropertyName: string}
{@param spec: NetworkInterfacesSpec}
{@param? tier: VmTierSpec}
{let $networkPropName: tierPrefixed($nameSuffix, $tier)/}
{$networkPropName}:
  type: array
  default: [default]
  minItems: {$spec.getMinCount()}
  maxItems: {$spec.getMaxCount()}
  x-googleProperty:
    type: GCE_NETWORK
    gceNetwork:
      allowSharedVpcs: True
      machineTypeProperty: {'machineType' |tierprefixed: $tier}
      {if length($spec.getLabelsList()) > 0}
      labels:
      {for $label in $spec.getLabelsList()}
      - {$label}
      {/for}
      {/if}
{'sub' + $nameSuffix |tierprefixed: $tier}:
  type: array
  minItems: {$spec.getMinCount()}
  maxItems: {$spec.getMaxCount()}
  x-googleProperty:
    type: GCE_SUBNETWORK
    zoneProperty: {$zonePropertyName}
    gceSubnetwork:
      networkProperty: {$networkPropName}
{'externalIP' |tierprefixed: $tier}:
  type: array
  default: [{externalIpTypeName($spec.getExternalIp()!.getDefaultType())}]
  minItems: {$spec.getMinCount()}
  maxItems: {$spec.getMaxCount()}
  x-googleProperty:
    type: GCE_EXTERNAL_IP
    gceExternalIp:
      networkProperty: {$networkPropName}
      notConfigurable: {if $spec.getExternalIp()!.getNotConfigurable()}True{else}False{/if}
      allowStaticIps: True
{/template}


{template ipForwardingPropertySchema kind="text"}
{@param name: string}
{@param spec: IpForwardingSpec}
{@param? tier: VmTierSpec}
{$name |tierprefixed: $tier}:
  type: string
  enum:
    - 'On'
    - 'Off'
  default: {if $spec.getDefaultOff()}'Off'{else}'On'{/if}
{/template}


{template bootDiskPropertiesSchema kind="text"}
{@param spec: DiskSpec}
{@param zonePropertyName: string}
{@param? tier: VmTierSpec}
{'bootDiskType' |tierprefixed: $tier}:
  type: string
  default: {$spec.getDiskType()!.getDefaultType()}
  x-googleProperty:
    type: GCE_DISK_TYPE
    zoneProperty: {$zonePropertyName}
{'bootDiskSizeGb' |tierprefixed: $tier}:
  type: integer
  default: {$spec.getDiskSize()!.getDefaultSizeGb()}
  {if $spec.getDiskSize()!.getMinSizeGb()}
  minimum: {$spec.getDiskSize()!.getMinSizeGb()}
  {/if}
  maximum: 10000
  x-googleProperty:
    type: GCE_DISK_SIZE
    gceDiskSize:
      diskTypeProperty: {'bootDiskType' |tierprefixed: $tier}
{/template}


{template additionalDiskPropertiesSchema kind="text"}
{@param spec: DiskSpec}
{@param diskIndex: int}
{@param zonePropertyName: string}
{@param? tier: VmTierSpec}
{diskTypePropertyName($diskIndex, $tier)}:
  type: string
  default: {$spec.getDiskType()!.getDefaultType()}
  x-googleProperty:
    type: GCE_DISK_TYPE
    zoneProperty: {$zonePropertyName}
{diskSizePropertyName($diskIndex, $tier)}:
  type: integer
  default: {$spec.getDiskSize()!.getDefaultSizeGb()}
  {if $spec.getDiskSize()!.getMinSizeGb()}
  minimum: {$spec.getDiskSize()!.getMinSizeGb()}
  {/if}
  maximum: 10000
  x-googleProperty:
    type: GCE_DISK_SIZE
    gceDiskSize:
      diskTypeProperty: {diskTypePropertyName($diskIndex, $tier)}
{/template}


{template tierInstanceAcountPropertySchema kind="text"}
{@param name: string}
{@param spec: VmTierSpec.TierInstanceCount}
{@param? tier: VmTierSpec}
{$name |tierprefixed: $tier}:
  type: integer
  default: {$spec.getDefaultValue()}
  {if $spec.getRange()}
  minimum: {$spec.getRange().getStartValue()}
  maximum: {$spec.getRange().getEndValue()}
  {elseif $spec.getList()}
  enum:
    {for $value in $spec.getList().getValuesList()}
    - {$value}
    {/for}
  {/if}
{/template}


{template deployInputPropertiesSchema kind="text"}
{@param inputSpec: DeployInputSpec}
{@param? tierSpec: VmTierSpec}
{let $fields: $tierSpec ?
  listDeployInputFields($inputSpec, $tierSpec)
  : listDeployInputFields($inputSpec)/}
{for $field in $fields}
{let $fieldSchema kind="text"}
  {call deployInputFieldSchema}{param field: $field/}{/call}
{/let}
{$fieldSchema}{nil}
{/for}
{/template}


{template deployInputFieldSchema /* visibility = "private" */ kind="text"}
{@param field: DeployInputField}
{deployInputFieldName($field) |yamlprimitive: 0}:
{if $field.getBooleanCheckbox()}
  type: boolean
  default: {if $field.getBooleanCheckbox().getDefaultValue()}True{else}False{/if}
{elseif $field.getGroupedBooleanCheckbox()}
  type: boolean
  default: {if $field.getGroupedBooleanCheckbox().getDefaultValue()}True{else}False{/if}
{elseif $field.getIntegerBox()}
  {let $box: $field.getIntegerBox()/}
  type: integer
  {if $box.getDefaultValue()}
  default: {$box.getDefaultValue().getValue() ?? 0}
  {/if}
  {if $box.getValidation()!.getMin()}
  minimum: {$box.getValidation()!.getMin().getValue() ?? 0}
  {/if}
  {if $box.getValidation()!.getMax()}
  maximum: {$box.getValidation()!.getMax().getValue() ?? 0}
  {/if}
{elseif $field.getIntegerDropdown()}
  {let $dropdown: $field.getIntegerDropdown()/}
  type: integer
  {if $dropdown.getDefaultValueIndex()}
  {let $defaultIndex: $dropdown.getDefaultValueIndex().getValue() ?? 0/}
  default: {$dropdown.getValuesList()[$defaultIndex]}
  {/if}
  enum:
  {for $value in $dropdown.getValuesList()}
  - {$value}
  {/for}
{elseif $field.getStringBox()}
  {let $box: $field.getStringBox()/}
  type: string
  {if $box.getDefaultValue()}
  default: {$box.getDefaultValue() |yamlprimitive: 2}
  {/if}
  {if $box.getValidation()?.getRegex()}
  pattern: {$box.getValidation().getRegex() |yamlprimitive: 2}
  {/if}
{elseif $field.getEmailBox()}
  {let $box: $field.getEmailBox()/}
  type: string
  {if $box.getDefaultValue()}
  default: {$box.getDefaultValue() |yamlprimitive: 2}
  {/if}
  {if $box.getValidation()?.getRegex()}
  pattern: {$box.getValidation().getRegex() |yamlprimitive: 2}
  {/if}
  x-googleProperty:
    type: EMAIL_ADDRESS
{elseif $field.getStringDropdown()}
  {let $dropdown: $field.getStringDropdown()/}
  type: string
  {if $dropdown.getDefaultValueIndex()}
  {let $defaultIndex: $dropdown.getDefaultValueIndex().getValue() ?? 0/}
  default: {$dropdown.getValuesList()[$defaultIndex] |yamlprimitive: 2}
  {/if}
  enum:
  {for $value in $dropdown.getValuesList()}
  - {$value |yamlprimitive: 4}
  {/for}
{elseif $field.getZoneDropdown()}
  {let $dropdown: $field.getZoneDropdown()/}
  type: string
  {if $dropdown.getDefaultValue()}
  default: {$dropdown.getDefaultValue().getValue() ?? '' |yamlprimitive: 2}
  {/if}
  x-googleProperty:
    type: GCE_ZONE
{/if}
{/template}


{template deployInputRequiredSchema kind="text"}
{@param? inputSpec: DeployInputSpec}
{@param? tierSpec: VmTierSpec}
{if $inputSpec}
{let $fields: $tierSpec ?
  listDeployInputFields($inputSpec, $tierSpec)
  : listDeployInputFields($inputSpec)/}
{for $field in $fields}
{if $field.getRequired()}
- {deployInputFieldName($field)}
{/if}
{/for}
{/if}
{/template}


{template jinjaConditionalContent kind="text"}
{@param enabledContent: string}
{@param disabledContent: string}
{@param jinjaConditionalVariableName: string}
{if $enabledContent.length > 0}
{% if {$jinjaConditionalVariableName} %}
{$enabledContent}{nil}
{if $disabledContent.length > 0}
{% else %}
{$disabledContent}{nil}
{/if}
{% endif %}
{elseif $disabledContent.length > 0}
{% if not {$jinjaConditionalVariableName} %}
{$disabledContent}{nil}
{% endif %}
{/if}
{/template}


{template localSsdPropertyItem kind="text"}
{@param localSsdSpec: LocalSsdSpec}
{@param deployInput: DeployInputSpec}
{if $localSsdSpec.getCount() and $localSsdSpec.getCount() > 0}
localSSDs: {$localSsdSpec.getCount()}{nil}
{elseif $localSsdSpec.getCountFromDeployInputField()}
{let $field: findDeployInputField($localSsdSpec.getCountFromDeployInputField(), $deployInput)/}
localSSDs: {{ properties["{deployInputFieldName($field)}"] }}{nil}
{/if}
{/template}


{template additionalDiskSection kind="text"}
{@param additionalDisksList: list<DiskSpec>}
{@param deployInputSpec: DeployInputSpec}
{@param? tierSpec: VmTierSpec}
{@param instanceName: string}
{for $disk, $index in $additionalDisksList}
{let $deviceNameSuffix kind="text"}
  {if $disk.getDeviceNameSuffix()!.getName()}
    {$disk.getDeviceNameSuffix()!.getName()}{nil}
  {elseif $disk.getDeviceNameSuffix()!.getNameFromDeployInputField()}
    {let $field: findDeployInputField($disk.getDeviceNameSuffix()!.getNameFromDeployInputField(), $deployInputSpec)/}
    {{ properties["{deployInputFieldName($field)}"] }}{nil}
  {/if}
{/let}
- deviceName: {$instanceName}-{$deviceNameSuffix}
  type: PERSISTENT
  diskType: {{ properties["{diskTypePropertyName($index, $tierSpec)}"] }}
  diskSizeGb: {{ properties["{diskSizePropertyName($index, $tierSpec)}"] }}
  boot: False
  autoDelete: {$disk.getPreventAutoDeletion() ? 'False' : 'True'}
{/for}
{/template}
