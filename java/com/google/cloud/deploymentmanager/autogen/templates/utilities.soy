{namespace utilities}

import {FirewallRuleSpec,GcpAuthScopeSpec,InstanceUrlSpec,PasswordSpec,VmTierSpec} from 'java/com/google/cloud/deploymentmanager/autogen/deployment_package_autogen_spec.proto';

/** Produces the property name for a firewall rule. */
{template firewallRulePropName kind="text"}
{@param spec: FirewallRuleSpec}
{@param? tierSpec: VmTierSpec}
{switch $spec.getProtocol()}
  {case FirewallRuleSpec.Protocol.TCP}
    {'enableTcp' + $spec.getPort() |tierprefixed: $tierSpec}{nil}
  {case FirewallRuleSpec.Protocol.UDP}
    {'enableUdp' + $spec.getPort() |tierprefixed: $tierSpec}{nil}
  {case FirewallRuleSpec.Protocol.ICMP}
    {'enableIcmp' + $spec.getPort() |tierprefixed: $tierSpec}{nil}
{/switch}
{/template}


/** Produces the targetTag for a firewall rule. */
{template firewallRuleTargetTag kind="text"}
{@param? tierSpec: VmTierSpec}
{if not $tierSpec}
{call deploymentTag data="all"/}{nil}
{else}
{call tierTag data="all"}{param spec: $tierSpec/}{/call}{nil}
{/if}
{/template}


/** Produces the name for a firewall rule. */
{template firewallRuleName kind="text"}
{@param spec: FirewallRuleSpec}
{@param? tierSpec: VmTierSpec}
{{ env["deployment"] }}{call firewallRuleNameSuffix data="all"/}{nil}
{/template}


/**
 * Produces the suffix of the name for a firewall rule name.
 * The suffix includes only the "-TCP-80" part.
 */
{template firewallRuleNameSuffix kind="text"}
{@param spec: FirewallRuleSpec}
{@param? tierSpec: VmTierSpec}
  {let $portSuffix kind="text"}
    {call firewallRulePortSuffix}
      {param spec: $spec /}
    {/call}
  {/let}
{switch $spec.getProtocol()}
  {case FirewallRuleSpec.Protocol.TCP}
    -{'tcp' + $portSuffix |tierprefixed: $tierSpec, '-'}{nil}
  {case FirewallRuleSpec.Protocol.UDP}
    -{'udp' + $portSuffix |tierprefixed: $tierSpec, '-'}{nil}
  {case FirewallRuleSpec.Protocol.ICMP}
    -{'icmp' |tierprefixed: $tierSpec, '-'}{nil}
{/switch}
{/template}


/**
 * Returns either the -deployment suffix (for non-tier specs) of -tiername-tier suffix (for a vm
 * tier spec).
 */
{template firewallRuleTargetTagSuffix kind="text"}
{@param? tierSpec: VmTierSpec}
{if not $tierSpec}
  -deployment{nil}
{else}
  -{$tierSpec.getName()}-tier{nil}
{/if}
{/template}


/**
 * Produces "-{PORT}" if port is provided for firewall rule.
 * In other case it returns "", empty string.
 */
{template firewallRulePortSuffix kind="text"}
{@param spec: FirewallRuleSpec}
{if $spec.getPort().length() > 0}
-{$spec.getPort()}{nil}
{/if}
{/template}


/** Produces the protocol as an uppercased string. */
{template firewallRuleProtocol kind="text"}
{@param spec: FirewallRuleSpec}
{switch $spec.getProtocol()}
  {case FirewallRuleSpec.Protocol.TCP}
    TCP{nil}
  {case FirewallRuleSpec.Protocol.UDP}
    UDP{nil}
  {case FirewallRuleSpec.Protocol.ICMP}
    ICMP{nil}
{/switch}
{/template}


/**
 * Produces a human-readable title for a firewall rule such as
 * "TCP 123" or "HTTPS".
 */
{template firewallRuleTitle kind="text"}
{@param spec: FirewallRuleSpec}
{if $spec.getPort().length() > 0}
{switch $spec.getProtocol()}
  {case FirewallRuleSpec.Protocol.TCP}
    {if $spec.getPort() == 80}
      HTTP{nil}
    {elseif $spec.getPort() == 443 }
      HTTPS{nil}
    {else}
      TCP port {$spec.getPort()}{nil}
    {/if}
  {case FirewallRuleSpec.Protocol.UDP}
    UDP port {$spec.getPort()}{nil}
{/switch}
{else}
  {call firewallRuleProtocol}{param spec: $spec /}{/call}{nil}
{/if}
{/template}


/** Produces the property name for firewall rule source ranges. */
{template firewallRuleSourceRangesPropName kind="text"}
{@param spec: FirewallRuleSpec}
{@param? tierSpec: VmTierSpec}
{switch $spec.getProtocol()}
  {case FirewallRuleSpec.Protocol.TCP}
    {'tcp' + $spec.getPort() + 'SourceRanges' |tierprefixed: $tierSpec}{nil}
  {case FirewallRuleSpec.Protocol.UDP}
    {'udp' + $spec.getPort() + 'SourceRanges' |tierprefixed: $tierSpec}{nil}
  {case FirewallRuleSpec.Protocol.ICMP}
    {'icmp' + $spec.getPort() + 'SourceRanges' |tierprefixed: $tierSpec}{nil}
{/switch}
{/template}


/** Produces the property name for an API scope. */
{template gcpAuthScopePropertyName kind="text"}
{@param spec: GcpAuthScopeSpec}
{@param? tierSpec: VmTierSpec}
{switch $spec.getScope()}
  {case GcpAuthScopeSpec.Scope.CLOUD_PLATFORM_READONLY}
    {'enableCloudReadonlyApi' |tierprefixed: $tierSpec}{nil}
  {case GcpAuthScopeSpec.Scope.CLOUD_PLATFORM}
    {'enableCloudApi' |tierprefixed: $tierSpec}{nil}
  {case GcpAuthScopeSpec.Scope.COMPUTE_READONLY}
    {'enableComputeReadonlyApi' |tierprefixed: $tierSpec}{nil}
  {case GcpAuthScopeSpec.Scope.COMPUTE}
    {'enableComputeApi' |tierprefixed: $tierSpec}{nil}
  {case GcpAuthScopeSpec.Scope.SOURCE_READ_WRITE}
    {'enableSourceReadWriteApi' |tierprefixed: $tierSpec}{nil}
  {case GcpAuthScopeSpec.Scope.PROJECTHOSTING}
    {'enableProjecthostingApi' |tierprefixed: $tierSpec}{nil}
{/switch}
{/template}


/** Produces the URL for an API scope. */
{template gcpAuthScopeUrl kind="text"}
{@param spec: GcpAuthScopeSpec}
{switch $spec.getScope()}
  {case GcpAuthScopeSpec.Scope.CLOUD_PLATFORM_READONLY}
    https://www.googleapis.com/auth/cloud-platform.read-only{nil}
  {case GcpAuthScopeSpec.Scope.CLOUD_PLATFORM}
    https://www.googleapis.com/auth/cloud-platform{nil}
  {case GcpAuthScopeSpec.Scope.COMPUTE_READONLY}
    https://www.googleapis.com/auth/compute.readonly{nil}
  {case GcpAuthScopeSpec.Scope.COMPUTE}
    https://www.googleapis.com/auth/compute{nil}
  {case GcpAuthScopeSpec.Scope.SOURCE_READ_WRITE}
    https://www.googleapis.com/auth/source.read_write{nil}
  {case GcpAuthScopeSpec.Scope.PROJECTHOSTING}
    https://www.googleapis.com/auth/projecthosting{nil}
{/switch}
{/template}


/** Produces the URL for an InstanceUrlSpec. */
{template makeUrl kind="text"}
{@param spec: InstanceUrlSpec}
{@param ip: string}
{let $scheme kind="text"}
  {switch $spec.getScheme()}
    {case InstanceUrlSpec.Scheme.HTTP}
      http{nil}
    {case InstanceUrlSpec.Scheme.HTTPS}
      https{nil}
  {/switch}
{/let}
{let $port: $spec.getPort() ? ':' + $spec.getPort() : ''/}
{let $path: $spec.getPath() ? $spec.getPath() : ''/}
{let $query: $spec.getQuery() ? '?' + $spec.getQuery() : ''/}
{let $fragment: $spec.getFragment() ? '#' + $spec.getFragment() : ''/}
{$scheme}://{$ip}{$port}/{$path}{$query}{$fragment}{nil}
{/template}


{template tierVmPrefix kind="text"}
{@param spec: VmTierSpec}
{{ env["deployment"] }}-{$spec.getName()}-vm{nil}
{/template}


/** Constructs an optionally conditional expression to print text
 * related to password generation condition */
{template passwordConditional kind="text"}
{@param password: PasswordSpec}
{@param conditionalContent: string}
{if $password.generateIf}
{% if {booleanExpressionJinjaExpression($password.generateIf)} %}
{$conditionalContent}{nil}
{% endif %}
{else}
{$conditionalContent}{nil}
{/if}
{/template}


{template passwordPropertyName kind="text"}
{@param passwordIndex: int}
generatedPassword{$passwordIndex}{nil}
{/template}


{template passwordResourceName kind="text"}
{@param passwordIndex: int}
generated-password-{$passwordIndex}{nil}
{/template}


{template passwordResourceOutputReference kind="text"}
{@param passwordIndex: int}
{let $resourceName kind="text"}
  {call passwordResourceName}{param passwordIndex: $passwordIndex/}{/call}
{/let}
$(ref.{$resourceName}.password){nil}
{/template}


{template deploymentTag kind="text"}
{{ env["deployment"] }}-deployment{nil}
{/template}


{template tierTag kind="text"}
{@param spec: VmTierSpec}
{{ env["deployment"] }}-{$spec.getName()}-tier{nil}
{/template}
