{namespace display}
{alias cloud.deploymentmanager.autogen as proto}

{template .openPortAction kind="text"}
{@param spec: cloud.deploymentmanager.autogen.FirewallRuleSpec}
{@param? tierSpec: cloud.deploymentmanager.autogen.VmTierSpec}
{let $firewallTitle kind="text"}{call utilities.firewallRuleTitle data="all"/}{/let}
{let $protocol kind="text"}{call utilities.firewallRuleProtocol data="all"/}{/let}
{let $heading kind="text"}
Open {$firewallTitle} traffic{nil}
{if $tierSpec}{sp}for {$tierSpec.title}{/if}
{/let}
{let $tierMainNetwork kind="text"}
  {if $tierSpec}
    {'mainNetwork' |tierprefixed: $tierSpec}{nil}
  {else}
    mainNetwork{nil}
  {/if}
{/let}
{let $targetTagSuffix kind="text"}
  {if not $tierSpec}
    -deployment{nil}
  {else}
    -{$tierSpec.name}-tier{nil}
  {/if}
{/let}
- heading: {$heading |yamlprimitive: 2}
  description: >-
    This firewall rule is not enabled.
    To allow specific network traffic {call .firewallRuleTrafficLabel}{param firewallSpec: $spec/}{/call},
    create a firewall rule to open {$firewallTitle} traffic
    for target tag "{{ outputs().deployment }}{$targetTagSuffix}".
    <a href="https://cloud.google.com/compute/docs/networking">Learn more</a><br>
    If you are using Google Cloud SDK, type the following command in
    the terminal:
  snippet: >-
    gcloud --project={{ outputs().project }} compute firewall-rules
    create "{{ outputs().deployment }}{call utilities.firewallRuleNameSuffix}{param spec: $spec/}{param tierSpec: $tierSpec/}{/call}"
    --network {{ outputs().{$tierMainNetwork} }}
    {if $spec.port and strLen($spec.port) > 0}
    --allow {$protocol |lowercased}:{$spec.port}
    {else}
    --allow {$protocol |lowercased}
    {/if}
    {if $tierSpec and $spec.allowedSource != proto.FirewallRuleSpec.TrafficSource.PUBLIC}
    {let $sourceTag kind="text"}
      {if $spec.allowedSource == proto.FirewallRuleSpec.TrafficSource.TIER}
        "{{ outputs().deployment }}-{$tierSpec.name}-tier"{nil}
      {else}
        "{{ outputs().deployment }}-deployment"{nil}
      {/if}
    {/let}
    --source-tags {$sourceTag}
    {/if}
    --target-tags "{{ outputs().deployment }}{$targetTagSuffix}"
  showIf: '{{ !properties().{call utilities.firewallRulePropName data="all"/} }}'{plsp}
{/template}


{template .firewallRuleTrafficLabel kind="text"}
{@param firewallSpec: cloud.deploymentmanager.autogen.FirewallRuleSpec}
{switch $firewallSpec.allowedSource}
{case proto.FirewallRuleSpec.TrafficSource.PUBLIC}
  from the Internet{nil}
{case proto.FirewallRuleSpec.TrafficSource.TIER}
  between VMs in this group{nil}
{case proto.FirewallRuleSpec.TrafficSource.DEPLOYMENT}
  from other VMs in this deployment{nil}
{/switch}
{/template}


{template .firewallDisplayProperties kind="text"}
{@param firewallsList: list<cloud.deploymentmanager.autogen.FirewallRuleSpec>}
{@param? tierSpec: cloud.deploymentmanager.autogen.VmTierSpec}
{let $section kind="text"}
  {if $tierSpec}
    {call .tierSectionName}{param spec: $tierSpec/}{/call}{nil}
  {else}
    NETWORKING{nil}
  {/if}
{/let}

{for $firewallRule in $firewallsList}
  {call .firewallDisplayProperty}
    {param firewallSpec: $firewallRule/}
    {param section: $section/}
    {param tierSpec: $tierSpec/}
  {/call}
{/for}
{/template}


{template .firewallDisplayProperty kind="text"}
{@param firewallSpec: cloud.deploymentmanager.autogen.FirewallRuleSpec}
{@param section: string}
{@param? tierSpec: cloud.deploymentmanager.autogen.VmTierSpec}
{let $propName kind="text"}
  {call utilities.firewallRulePropName}
    {param spec: $firewallSpec/}
    {param tierSpec: $tierSpec/}
  {/call}
{/let}
{let $firewallTitle kind="text"}{call utilities.firewallRuleTitle}{param spec: $firewallSpec/}{/call}{/let}
- name: {$propName}
  title: Allow {$firewallTitle} traffic {call .firewallRuleTrafficLabel}{param firewallSpec: $firewallSpec/}{/call}
  section: {$section}
{if $firewallSpec.allowedSource == proto.FirewallRuleSpec.TrafficSource.PUBLIC}
{let $rangePropName kind="text"}
  {call utilities.firewallRuleSourceRangesPropName}
    {param spec: $firewallSpec/}
    {param tierSpec: $tierSpec/}
  {/call}
{/let}
- name: {$rangePropName}
  title: Source IP ranges for {$firewallTitle} traffic
  tooltip: 'Traffic is only allowed from sources within these IP address ranges. Use CIDR notation when entering ranges. <a href="https://cloud.google.com/compute/docs/networking#firewalls">Learn more</a>'
  placeholder: '0.0.0.0/0, 192.169.0.2/24'
  section: {$section}
{/if}
{/template}


{template .authScopeDescription kind="text"}
{@param spec: cloud.deploymentmanager.autogen.GcpAuthScopeSpec}
{switch $spec.scope}
  {case proto.GcpAuthScopeSpec.Scope.CLOUD_PLATFORM_READONLY}
    read only access to all of Google Cloud Platform APIs{nil}
  {case proto.GcpAuthScopeSpec.Scope.CLOUD_PLATFORM}
    full access to all of Google Cloud Platform APIs{nil}
  {case proto.GcpAuthScopeSpec.Scope.COMPUTE_READONLY}
    read access to Google Compute Engine APIs{nil}
  {case proto.GcpAuthScopeSpec.Scope.COMPUTE}
    read write access to Google Compute Engine APIs{nil}
  {case proto.GcpAuthScopeSpec.Scope.SOURCE_READ_WRITE}
    read write access to Google Cloud Source Repositories APIs{nil}
  {case proto.GcpAuthScopeSpec.Scope.PROJECTHOSTING}
    project hosting access to (Deprecated) Google Code Project Hosting APIs{nil}
{/switch}
{/template}


{template .authScopeBoolGroupName kind="text"}
{@param spec: cloud.deploymentmanager.autogen.GcpAuthScopeSpec}
{@param? tier: cloud.deploymentmanager.autogen.VmTierSpec}
{if $tier}
{call .tierSectionName}{param spec: $tier/}{/call}_{nil}
{/if}
{switch $spec.scope}
  {case proto.GcpAuthScopeSpec.Scope.CLOUD_PLATFORM_READONLY}
    CLOUD_PLATFORM_READONLY_API_ACCESS{nil}
  {case proto.GcpAuthScopeSpec.Scope.CLOUD_PLATFORM}
    CLOUD_PLATFORM_API_ACCESS{nil}
  {case proto.GcpAuthScopeSpec.Scope.COMPUTE_READONLY}
    COMPUTE_READONLY_API_ACCESS{nil}
  {case proto.GcpAuthScopeSpec.Scope.COMPUTE}
    COMPUTE_API_ACCESS{nil}
  {case proto.GcpAuthScopeSpec.Scope.SOURCE_READ_WRITE}
    SOURCE_READ_WRITE_API_ACCESS{nil}
  {case proto.GcpAuthScopeSpec.Scope.PROJECTHOSTING}
    PROJECT_HOSTING_API_ACCESS{nil}
{/switch}
{/template}


{template .authScopeBoolGroupTitle kind="text"}
{@param spec: cloud.deploymentmanager.autogen.GcpAuthScopeSpec}
{switch $spec.scope}
  {case proto.GcpAuthScopeSpec.Scope.CLOUD_PLATFORM_READONLY}
    Google Cloud Platform Readonly API{nil}
  {case proto.GcpAuthScopeSpec.Scope.CLOUD_PLATFORM}
    Google Cloud Platform API{nil}
  {case proto.GcpAuthScopeSpec.Scope.COMPUTE_READONLY}
    Compute Readonly API{nil}
  {case proto.GcpAuthScopeSpec.Scope.COMPUTE}
    Compute API{nil}
  {case proto.GcpAuthScopeSpec.Scope.SOURCE_READ_WRITE}
    Cloud Source Repositories Readwrite API{nil}
  {case proto.GcpAuthScopeSpec.Scope.PROJECTHOSTING}
    (Deprecated) Code Project Hosting APIs{nil}
{/switch}
{/template}


{template .makeExternalUrlLink kind="text"}
{@param spec: cloud.deploymentmanager.autogen.InstanceUrlSpec}
{@param? tiersList: list<cloud.deploymentmanager.autogen.VmTierSpec>}
// Specifies the right kinds so that HTML escapes are done correctly.
// Note that we do not put the IP expression into the original URL to
// prevent it from being incorrectly escaped.
{let $url kind="uri"}{call utilities.makeUrl}{param spec: $spec/}{param ip: '0.0.0.0'/}{/call}{/let}
{let $anchorHtml kind="html"}<a href="{$url}">{$url}</a>{/let}{nil}
{let $output kind="text"}
  {call .vmOutputExpression}
    {param baseOutputName: 'vmSelfLink'/}
    {param spec: $spec.tierVm/}
    {param tiersList: $tiersList/}
  {/call}
{/let}
{$anchorHtml |replaceAll: '0.0.0.0', '{{ externalIp(' +  $output + ') }}'}{nil}
{/template}


{template .makeInternalUrl kind="text"}
{@param spec: cloud.deploymentmanager.autogen.InstanceUrlSpec}
{@param? tiersList: list<cloud.deploymentmanager.autogen.VmTierSpec>}
{let $url kind="uri"}{call utilities.makeUrl}{param spec: $spec/}{param ip: '0.0.0.0'/}{/call}{/let}
{let $output kind="text"}
  {call .vmOutputExpression}
    {param baseOutputName: 'vmInternalIP'/}
    {param spec: $spec.tierVm/}
    {param tiersList: $tiersList/}
  {/call}
{/let}
{$url |replaceAll: '0.0.0.0', '{{ ' +  $output + ' }}'}{nil}
{/template}


{template .makeExternalUrl kind="text"}
{@param spec: cloud.deploymentmanager.autogen.InstanceUrlSpec}
{@param? tiersList: list<cloud.deploymentmanager.autogen.VmTierSpec>}
{let $url kind="uri"}{call utilities.makeUrl}{param spec: $spec/}{param ip: '0.0.0.0'/}{/call}{/let}
{let $output kind="text"}
  {call .vmOutputExpression}
    {param baseOutputName: 'vmSelfLink'/}
    {param spec: $spec.tierVm/}
    {param tiersList: $tiersList/}
  {/call}
{/let}
{$url |replaceAll: '0.0.0.0', '{{ externalIp(' +  $output + ') }}'}{nil}
{/template}


{template .vmOutputExpression kind="text"}
{@param baseOutputName: string}
{@param? spec: cloud.deploymentmanager.autogen.TierVmInstance}
{@param? tiersList: list<cloud.deploymentmanager.autogen.VmTierSpec>}
{if $spec}
  {let $tier: findVmTier($spec.tier, $tiersList)/}
  {let $prefix kind="text"}{$baseOutputName |tierprefixed: $tier}{nil}{/let}
  {let $instanceCount kind="text"}
    properties().{'instanceCount' |tierprefixed: $tier}"]{nil}
  {/let}
  {let $vmIndex: $spec.index ?: 0/}
  {if $vmIndex >= 0}
    outputs()["{$prefix}" + {$vmIndex}]{nil}
  {else}
    outputs()["{$prefix}" + ({$instanceCount} - {-$vmIndex})]{nil}
  {/if}
{else}
  outputs().{$baseOutputName}{nil}
{/if}
{/template}


{template .deployInputFieldDisplay kind="text"}
{@param section: cloud.deploymentmanager.autogen.DeployInputSection}
{@param field: cloud.deploymentmanager.autogen.DeployInputField}
{@param? tierList: list<cloud.deploymentmanager.autogen.VmTierSpec>}
name: {deployInputFieldName($field) |yamlprimitive: 0}
{if $field.title}
title: {$field.title |yamlprimitive: 0}
{/if}
{if $field.description}
subtext: {$field.description |yamlprimitive: 0}
{/if}
{if $field.tooltip}
tooltip: {$field.tooltip |yamlprimitive: 0}
{/if}
{if $field.integerBox?.validation?.description}
validation: {$field.integerBox.validation.description |yamlprimitive: 0}
{elseif $field.stringBox?.validation?.description}
validation: {$field.stringBox.validation.description |yamlprimitive: 0}
{elseif $field.emailBox?.validation?.description}
validation: {$field.emailBox.validation.description |yamlprimitive: 0}
{/if}
{if $field.level}
level: {$field.level}
{/if}
{if $section.placement == proto.DeployInputSection.Placement.CUSTOM_TOP or
    $section.placement == proto.DeployInputSection.Placement.CUSTOM_BOTTOM}
section: {$section.name |yamlprimitive: 0}
{elseif $section.placement == proto.DeployInputSection.Placement.TIER}
section: {call .tierSectionName}{param spec: findVmTier($section.tier, $tierList)/}{/call}
{/if}

{if $field.groupedBooleanCheckbox}
{let $displayGroup: findDisplayGroup($field, $section)/}
boolean_group: {$displayGroup.name |yamlprimitive: 0}

{elseif $field.integerBox}
{let $box: $field.integerBox/}
{if $box.placeholder}
placeholder: {$box.placeholder |yamlprimitive: 0}
{/if}

{elseif $field.stringBox}
{let $box: $field.stringBox/}
{if $box.placeholder}
placeholder: {$box.placeholder |yamlprimitive: 0}
{/if}

{elseif $field.emailBox}
{let $box: $field.emailBox/}
{if $box.placeholder}
placeholder: {$box.placeholder |yamlprimitive: 0}
{/if}
{/if}

{let $valueLabels: fieldValueLabelMap($field)/}
{if $valueLabels}
enumLabels:
  {for $key in mapKeys($valueLabels)}
  '{$key}': {$valueLabels[$key] |yamlprimitive: 2}
  {/for}
{/if}
{/template}


{template .stackdriverDisplay kind="text"}
{@param stackdriver: cloud.deploymentmanager.autogen.StackdriverSpec}
{if $stackdriver?.logging}
- name: enableStackdriverLogging
  title: Enable Stackdriver Logging
  tooltip: 'Stackdriver Logging allows you to store, search, analyze, monitor, and alert on log data and events. <a href="https://cloud.google.com/logging/">Learn more</a>'
  section: STACKDRIVER
{/if}
{if $stackdriver?.monitoring}
- name: enableStackdriverMonitoring
  title: Enable Stackdriver Monitoring
  tooltip: 'Stackdriver Monitoring provides visibility into the performance, uptime, and overall health of cloud-powered applications. <a href="https://cloud.google.com/monitoring/">Learn more</a>'
  section: STACKDRIVER
{/if}
{/template}


{template .stackdriverBottomSections kind="text"}
{@param stackdriver: cloud.deploymentmanager.autogen.StackdriverSpec}
{if $stackdriver?.logging or $stackdriver?.monitoring}
- name: STACKDRIVER
  title: Stackdriver
  subtext: Monitoring and management for services, containers, applications, and infrastructure
{/if}
{/template}


{template .topSections kind="text"}
{@param? spec: cloud.deploymentmanager.autogen.DeployInputSpec}
{let $output kind="text"}
  {call .customSectionsHelper}
    {param spec: $spec/}
    {param placement: proto.DeployInputSection.Placement.CUSTOM_TOP/}
  {/call}
{/let}
{$output |indent: 4, true}{nil}
{/template}


{template .bottomSections kind="text"}
{@param? spec: cloud.deploymentmanager.autogen.DeployInputSpec}
{let $output kind="text"}
  {call .customSectionsHelper}
    {param spec: $spec/}
    {param placement: proto.DeployInputSection.Placement.CUSTOM_BOTTOM/}
  {/call}
{/let}
{$output |indent: 4, true}{nil}
{/template}


{template .customSectionsHelper kind="text"}
{@param? spec: cloud.deploymentmanager.autogen.DeployInputSpec}
{@param placement: cloud.deploymentmanager.autogen.DeployInputSection.Placement}
{if $spec}
{for $section in $spec.sectionsList}
{if $section.placement == $placement}
- name: {$section.name |yamlprimitive: 2}
  title: {$section.title |yamlprimitive: 2}
  {if $section.tooltip}
  tooltip: {$section.tooltip |yamlprimitive: 2}
  {/if}
  {if $section.description}
  subtext: {$section.description |yamlprimitive: 2}
  {/if}
{/if}
{/for}
{/if}
{/template}


{template .customBooleanGroups kind="text"}
{@param? spec: cloud.deploymentmanager.autogen.DeployInputSpec}
{if $spec}
{for $section in $spec.sectionsList}
{for $field in $section.fieldsList}
{if $field.groupedBooleanCheckbox and $field.groupedBooleanCheckbox.displayGroup}
{let $group: $field.groupedBooleanCheckbox.displayGroup/}
- name: {$group.name |yamlprimitive: 2}
  title: {$group.title |yamlprimitive: 2}
  {if $group.tooltip}
  tooltip: {$group.tooltip |yamlprimitive: 2}
  {/if}
  {if $group.description}
  subtext: {$group.description |yamlprimitive: 2}
  {/if}
{/if}
{/for}
{/for}
{/if}
{/template}


{template .tierSectionName kind="text"}
{@param spec: cloud.deploymentmanager.autogen.VmTierSpec}
{$spec.name |uppercased}_TIER{nil}
{/template}


{template .authScopeBooleanGroups kind="text"}
{@param? singleVmSpec: cloud.deploymentmanager.autogen.SingleVmDeploymentPackageSpec}
{@param? multiVmSpec: cloud.deploymentmanager.autogen.MultiVmDeploymentPackageSpec}
{if $singleVmSpec}
{for $scope in $singleVmSpec.gcpAuthScopesList}
- name: {call .authScopeBoolGroupName}{param spec: $scope/}{/call}
  title: {call .authScopeBoolGroupTitle}{param spec: $scope/}{/call}
{/for}

{else}

{for $tier in $multiVmSpec.tiersList}
{for $scope in $tier.gcpAuthScopesList}
- name: {call .authScopeBoolGroupName}{param spec: $scope/}{param tier: $tier/}{/call}
  title: {call .authScopeBoolGroupTitle}{param spec: $scope/}{/call}
{/for}
{/for}
{/if}
{/template}


{template .siteUrlApplicationTableRow kind="text"}
{@param spec: cloud.deploymentmanager.autogen.InstanceUrlSpec}
{@param? tiersList: list<cloud.deploymentmanager.autogen.VmTierSpec>}
{let $content kind="text"}
  {call .instanceUrlApplicationTableRow data="all"}
    {param label: 'Site address'/}
  {/call}
{/let}
{$content}{nil}
{/template}


{template .adminUrlApplicationTableRow kind="text"}
{@param spec: cloud.deploymentmanager.autogen.InstanceUrlSpec}
{@param? tiersList: list<cloud.deploymentmanager.autogen.VmTierSpec>}
{let $content kind="text"}
  {call .instanceUrlApplicationTableRow data="all"}
    {param label: 'Admin URL'/}
  {/call}
{/let}
{$content}{nil}
{/template}


{template .instanceUrlApplicationTableRow kind="text"}
{@param label: string}
{@param spec: cloud.deploymentmanager.autogen.InstanceUrlSpec}
{@param? tiersList: list<cloud.deploymentmanager.autogen.VmTierSpec>}
{let $externalUrl kind="text"}
  {call .makeExternalUrlLink}{param spec: $spec/}{param tiersList: $tiersList /}{/call}
{/let}
{let $internalUrl kind="text"}
  {call .makeInternalUrl}{param spec: $spec/}{param tiersList: $tiersList /}{/call}
{/let}
{let $hasExternalIpProp kind="text"}
  {if $spec.tierVm}
    {'hasExternalIP' |tierprefixed: findVmTier($spec.tierVm.tier, $tiersList)}{nil}
  {else}
    hasExternalIP{nil}
  {/if}
{/let}
- label: {$label |yamlprimitive: 2}
  value: {$externalUrl |yamlprimitive: 2}
  showIf: '{{ outputs().{$hasExternalIpProp} }}'
- label: {$label + ' (internal IP)' |yamlprimitive: 2}
  value: {$internalUrl |yamlprimitive: 2}
  showIf: '{{ !outputs().{$hasExternalIpProp} }}'
{/template}


{template .passwordApplicationTableRows kind="text"}
{@param passwordsList: list<cloud.deploymentmanager.autogen.PasswordSpec>}
{@param? deployInput: cloud.deploymentmanager.autogen.DeployInputSpec}
{@param? tiersList: list<cloud.deploymentmanager.autogen.VmTierSpec>}
{for $password in $passwordsList}
{if $password.username}
- label: {($password.displayLabel + ' user') |yamlprimitive: 2}
  value: {$password.username}
  {if $password.generateIf}
  showIf: '{{ {booleanExpressionDisplayCondition($password.generateIf, $tiersList)} }}'
  {/if}
{elseif $password.usernameFromDeployInputField}
{let $field: findDeployInputField($password.usernameFromDeployInputField, $deployInput)/}
- label: {($password.displayLabel + ' user') |yamlprimitive: 2}
  value: '{{ properties().{deployInputFieldName($field)} }}'
  {if $password.generateIf}
  showIf: '{{ {booleanExpressionDisplayCondition($password.generateIf, $tiersList)} }}'
  {/if}
{/if}
- label: {($password.displayLabel + ' password (Temporary)') |yamlprimitive: 2}
  value: '{{ outputs().password{index($password)} }}'
  {if $password.generateIf}
  showIf: '{{ {booleanExpressionDisplayCondition($password.generateIf, $tiersList)} }}'
  {/if}
{/for}
{/template}


{template .infoRowApplicationTableRow kind="text"}
{@param infoRow: cloud.deploymentmanager.autogen.PostDeployInfo.InfoRow}
{@param? deployInput: cloud.deploymentmanager.autogen.DeployInputSpec}
{@param? tiersList: list<cloud.deploymentmanager.autogen.VmTierSpec>}
- label: {$infoRow.label |yamlprimitive: 8}
{if $infoRow.value}
  value: {$infoRow.value |yamlprimitive: 8}
{elseif $infoRow.valueFromDeployInputField}
  {let $field: findDeployInputField($infoRow.valueFromDeployInputField, $deployInput)/}
  value: '{{ properties().{deployInputFieldName($field)} }}'
{/if}
{if $infoRow.showIf}
  showIf: '{{ {booleanExpressionDisplayCondition($infoRow.showIf, $tiersList)} }}'
{/if}
{/template}


{template .adminActionButton kind="text"}
{@param spec: cloud.deploymentmanager.autogen.InstanceUrlSpec}
{@param? tiersList: list<cloud.deploymentmanager.autogen.VmTierSpec>}
{let $actionUrl kind="text"}{call .makeExternalUrl data="all"/}{/let}
label: Log into the admin panel
type: TYPE_URL
action: {$actionUrl |yamlprimitive: 0}
{/template}


{template .siteActionButton kind="text"}
{@param spec: cloud.deploymentmanager.autogen.InstanceUrlSpec}
{@param? tiersList: list<cloud.deploymentmanager.autogen.VmTierSpec>}
{let $actionUrl kind="text"}{call .makeExternalUrl data="all"/}{/let}
label: Visit the site
type: TYPE_URL
action: {$actionUrl |yamlprimitive: 0}
{/template}


{template .connectActionButton kind="text"}
{@param? button: cloud.deploymentmanager.autogen.PostDeployInfo.ConnectToInstanceSpec}
{@param? tiersList: list<cloud.deploymentmanager.autogen.VmTierSpec>}
{let $output kind="text"}
  {call .vmOutputExpression}
    {param baseOutputName: 'vmSelfLink'/}
    {param spec: $button.tierVm/}
    {param tiersList: $tiersList/}
  {/call}
{/let}
{if $button.displayLabel}
label: {$button.displayLabel |yamlprimitive: 4}
{/if}
type: TYPE_GCE_VM_SSH
action: '{{ {$output} }}'
{/template}


{template .acceleratorProperty kind="text"}
{@param? tier: cloud.deploymentmanager.autogen.VmTierSpec}
- name: {'acceleratorType' |tierprefixed: $tier}
  title: GPUs
{if $tier}
  section: {call .tierSectionName}{param spec: $tier/}{/call}
{/if}
{/template}


{template .acceleratorZoneSubtext kind="text"}
subtext: 'GPU availability is limited to certain zones. <a href="https://cloud.google.com/compute/docs/gpus">Learn more</a>'
{/template}
