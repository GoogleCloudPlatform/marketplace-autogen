{namespace vm.multi.schema}

import * as renders from 'com/google/cloud/deploymentmanager/autogen/templates/renders.soy';
import * as utilities from 'com/google/cloud/deploymentmanager/autogen/templates/utilities.soy';
import {MultiVmDeploymentPackageSpec, VmTierSpec} from 'java/com/google/cloud/deploymentmanager/autogen/deployment_package_autogen_spec.proto';
import {SolutionMarketingInfo} from 'java/com/google/cloud/deploymentmanager/autogen/marketing_info.proto';


{template main kind="text"}
{@param solutionId: string}
{@param spec: MultiVmDeploymentPackageSpec}
{@param? solutionInfo: SolutionMarketingInfo}
{@param? templateVersion: string}

imports:
  {for $tier in $spec.getTiersList()}
  - path: {tierTemplateName($tier)}
  {/for}

{\n}
info:
  {if $templateVersion}
  version: {$templateVersion |yamlprimitive: 2}
  {else}
  version: '1.0'
  {/if}
  {if $solutionInfo}
  title: {$solutionInfo.getName() + ' Template' |yamlprimitive: 2}
  {else}
  title: {$solutionId + ' template' |yamlprimitive: 2}
  {/if}

{\n}
required:
  - zone

  {for $tier in $spec.getTiersList()}
  {let $list kind="text"}{call tierRequiredList}{param spec: $tier/}{/call}{/let}
  {$list |indent: 2, true}{nil}
  {/for}

  {let $deployInputRequiredList kind="text"}
    {call renders.deployInputRequiredSchema}{param inputSpec: $spec.getDeployInput()/}{/call}
  {/let}
  {$deployInputRequiredList |indent: 2, true}{nil}

{\n}
properties:
  {let $zoneProp kind="text"}
    {call renders.zonePropertySchema}
      {param name: 'zone'/}
      {param zoneSpec: $spec.getZone()/}
    {/call}
  {/let}
  {$zoneProp |indent: 2, true}{nil}

  {for $tier in $spec.getTiersList()}
  {let $tierProperties kind="text"}{call tierProperties}{param spec: $tier/}{/call}{/let}
  {$tierProperties |indent: 2, true}{nil}
  {/for}

  {if $spec.getDeployInput()}
  {let $deployInputProps kind="text"}
    {call renders.deployInputPropertiesSchema}
      {param inputSpec: $spec.getDeployInput()/}
    {/call}
  {/let}
  {$deployInputProps |indent: 2, true}{nil}
  {/if}

  {if $spec.getStackdriver()}
  {let $stackdriverPropertiesSchema kind="text"}
    {call renders.stackdriverPropertiesSchema}
      {param stackdriver: $spec.getStackdriver()/}
    {/call}
  {/let}
  {$stackdriverPropertiesSchema |indent: 2, true}{nil}
  {/if}

{\n}
outputs:
  deployment:
    type: string
  project:
    type: string
  {for $password, $index in $spec.getPasswordsList()}
  password{$index}:
    type: string
  {/for}

{/template}


{template tierRequiredList kind="text" /* visibility="private" */}
{@param spec: VmTierSpec}
- {'instanceCount' |tierprefixed: $spec}
- {'machineType' |tierprefixed: $spec}
- {'bootDiskType' |tierprefixed: $spec}
- {'bootDiskSizeGb' |tierprefixed: $spec}
- {'network' |tierprefixed: $spec}
- {'image' |tierprefixed: $spec}
{/template}


{template tierProperties kind="text" /* visibility="private" */}
{@param spec: VmTierSpec}
{let $instanceCountProp kind="text"}
  {call renders.tierInstanceAcountPropertySchema}
    {param name: 'instanceCount'/}
    {param spec: $spec.getInstanceCount()! /}
    {param tier: $spec/}
  {/call}
{/let}
{$instanceCountProp}{nil}

{let $imageProp kind="text"}
  {call renders.imagePropertySchema}
    {param name: 'image'/}
    {param imagesList: $spec.getImagesList() /}
    {param tier: $spec/}
  {/call}
{/let}
{$imageProp}{nil}

{let $machineTypeProp kind="text"}
  {call renders.machineTypePropertySchema}
    {param name: 'machineType'/}
    {param spec: $spec.getMachineType()! /}
    {param tier: $spec/}
  {/call}
{/let}
{$machineTypeProp}{nil}

{if length($spec.getAcceleratorsList()) > 0}
{let $acceleratorProps kind="text"}
  {call renders.acceleratorPropertiesSchema}
    {param namePrefix: 'accelerator'/}
    {param spec: $spec.getAcceleratorsList()[0] /}
    {param tier: $spec/}
  {/call}
{/let}
{$acceleratorProps}{nil}
{/if}

{let $networkProps kind="text"}
  {call renders.networkPropertiesSchema}
    {param nameSuffix: 'network'/}
    {param zonePropertyName: 'zone'/}
    {param spec: $spec.getNetworkInterfaces()! /}
    {param tier: $spec/}
  {/call}
{/let}
{$networkProps}{nil}

{if $spec.getIpForwarding()}
{let $ipForwardingProp kind="text"}
  {call renders.ipForwardingPropertySchema}
    {param name: 'ipForward'/}
    {param spec: $spec.getIpForwarding()/}
    {param tier: $spec/}
  {/call}
{/let}
{$ipForwardingProp}{nil}
{/if}

{for $scope in $spec.getGcpAuthScopesList()}
{call utilities.gcpAuthScopePropertyName}{param spec: $scope/}{param tierSpec: $spec/}{/call}:
  type: boolean
  default: {if $scope.getDefaultOff()}False{else}True{/if}
{/for}

{let $bootDiskProps kind="text"}
  {call renders.bootDiskPropertiesSchema}
    {param spec: $spec.getBootDisk()! /}
    {param zonePropertyName: 'zone'/}
    {param tier: $spec/}
  {/call}
{/let}
{$bootDiskProps}{nil}

{for $disk, $index in $spec.getAdditionalDisksList()}
{let $diskProps kind="text"}
  {call renders.additionalDiskPropertiesSchema}
    {param spec: $spec.getAdditionalDisksList()[$index] /}
    {param diskIndex: $index/}
    {param zonePropertyName: 'zone'/}
    {param tier: $spec/}
  {/call}
{/let}
{$diskProps}{nil}
{/for}

{for $firewallRule in $spec.getFirewallRulesList()}
{call renders.firewallProps}{param spec: $firewallRule/}{param tierSpec: $spec/}{/call}
{/for}
{/template}
