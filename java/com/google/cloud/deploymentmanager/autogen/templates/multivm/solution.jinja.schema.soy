{namespace vm.multi}

{template .schema kind="text"}
{@param solutionId: string}
{@param spec: cloud.deploymentmanager.autogen.MultiVmDeploymentPackageSpec}
{@param? solutionInfo: cloud.deploymentmanager.autogen.SolutionMarketingInfo}
{@param? templateVersion: string}

imports:
  {for $tier in $spec.tiersList}
  - path: {tierTemplateName($tier)}
  {/for}

{\n}
info:
  {if $templateVersion}
  version: {$templateVersion |yamlprimitive: 2}
  {else}
  version: '1.0'
  {/if}
  {if $solutionInfo}
  title: {$solutionInfo.name + ' Template' |yamlprimitive: 2}
  {else}
  title: {$solutionId + ' template' |yamlprimitive: 2}
  {/if}

{\n}
required:
  - zone

  {for $tier in $spec.tiersList}
  {let $list kind="text"}{call .tierRequiredList}{param spec: $tier/}{/call}{/let}
  {$list |indent: 2, true}{nil}
  {/for}

  {let $deployInputRequiredList kind="text"}
    {call renders.deployInputRequiredSchema}{param inputSpec: $spec.deployInput/}{/call}
  {/let}
  {$deployInputRequiredList |indent: 2, true}{nil}

{\n}
properties:
  {let $zoneProp kind="text"}
    {call renders.zonePropertySchema}
      {param name: 'zone'/}
      {param zoneSpec: $spec.zone/}
    {/call}
  {/let}
  {$zoneProp |indent: 2, true}{nil}

  {for $tier in $spec.tiersList}
  {let $tierProperties kind="text"}{call .tierProperties}{param spec: $tier/}{/call}{/let}
  {$tierProperties |indent: 2, true}{nil}
  {/for}

  {if $spec.deployInput}
  {let $deployInputProps kind="text"}
    {call renders.deployInputPropertiesSchema}
      {param inputSpec: $spec.deployInput/}
    {/call}
  {/let}
  {$deployInputProps |indent: 2, true}{nil}
  {/if}

  {if $spec.stackdriver}
  {let $stackdriverPropertiesSchema kind="text"}
    {call renders.stackdriverPropertiesSchema}
      {param stackdriver: $spec.stackdriver/}
    {/call}
  {/let}
  {$stackdriverPropertiesSchema |indent: 2, true}{nil}
  {/if}

{\n}
outputs:
  deployment:
    type: string
  project:
    type: string
  {for $password in $spec.passwordsList}
  password{index($password)}:
    type: string
  {/for}

{/template}


{template .tierRequiredList kind="text" /* visibility="private" */}
{@param spec: cloud.deploymentmanager.autogen.VmTierSpec}
- {'instanceCount' |tierprefixed: $spec}
- {'machineType' |tierprefixed: $spec}
- {'bootDiskType' |tierprefixed: $spec}
- {'bootDiskSizeGb' |tierprefixed: $spec}
- {'network' |tierprefixed: $spec}
{if length($spec.imagesList) > 1}
- {'image' |tierprefixed: $spec}
{/if}
{/template}


{template .tierProperties kind="text" /* visibility="private" */}
{@param spec: cloud.deploymentmanager.autogen.VmTierSpec}
{let $instanceCountProp kind="text"}
  {call renders.tierInstanceAcountPropertySchema}
    {param name: 'instanceCount'/}
    {param spec: $spec.instanceCount/}
    {param tier: $spec/}
  {/call}
{/let}
{$instanceCountProp}{nil}

{if length($spec.imagesList) > 1}
{let $imageProp kind="text"}
  {call renders.imagePropertySchema}
    {param name: 'image'/}
    {param imagesList: $spec.imagesList/}
    {param tier: $spec/}
  {/call}
{/let}
{$imageProp}{nil}
{/if}

{let $machineTypeProp kind="text"}
  {call renders.machineTypePropertySchema}
    {param name: 'machineType'/}
    {param spec: $spec.machineType/}
    {param tier: $spec/}
  {/call}
{/let}
{$machineTypeProp}{nil}

{if length($spec.acceleratorsList) > 0}
{let $acceleratorProps kind="text"}
  {call renders.acceleratorPropertiesSchema}
    {param namePrefix: 'accelerator'/}
    {param spec: $spec.acceleratorsList[0]/}
    {param tier: $spec/}
  {/call}
{/let}
{$acceleratorProps}{nil}
{/if}

{let $networkProps kind="text"}
  {call renders.networkPropertiesSchema}
    {param nameSuffix: 'network'/}
    {param zonePropertyName: 'zone'/}
    {param spec: $spec.networkInterfaces/}
    {param tier: $spec/}
  {/call}
{/let}
{$networkProps}{nil}

{if $spec.ipForwarding}
{let $ipForwardingProp kind="text"}
  {call renders.ipForwardingPropertySchema}
    {param name: 'ipForward'/}
    {param spec: $spec.ipForwarding/}
    {param tier: $spec/}
  {/call}
{/let}
{$ipForwardingProp}{nil}
{/if}

{for $scope in $spec.gcpAuthScopesList}
{call utilities.gcpAuthScopePropertyName}{param spec: $scope/}{param tierSpec: $spec/}{/call}:
  type: boolean
  default: {if $scope.defaultOff}False{else}True{/if}
{/for}

{let $bootDiskProps kind="text"}
  {call renders.bootDiskPropertiesSchema}
    {param spec: $spec.bootDisk/}
    {param zonePropertyName: 'zone'/}
    {param tier: $spec/}
  {/call}
{/let}
{$bootDiskProps}{nil}

{for $disk in $spec.additionalDisksList}
{let $diskProps kind="text"}
  {call renders.additionalDiskPropertiesSchema}
    {param spec: $spec.additionalDisksList[index($disk)]/}
    {param diskIndex: index($disk)/}
    {param zonePropertyName: 'zone'/}
    {param tier: $spec/}
  {/call}
{/let}
{$diskProps}{nil}
{/for}

{for $firewallRule in $spec.firewallRulesList}
{call renders.firewallProps}{param spec: $firewallRule/}{param tierSpec: $spec/}{/call}
{/for}
{/template}
