{namespace metadata.blocks}

import * as constants from 'com/google/cloud/deploymentmanager/autogen/templates/tf/constants.soy';
import * as util from 'com/google/cloud/deploymentmanager/autogen/templates/tf/util.soy';
import {AcceleratorSpec, DeployInputField, DeployInputSpec, DiskSpec, FirewallRuleSpec, ImageSpec, IpForwardingSpec, MachineTypeSpec, NetworkInterfacesSpec, PasswordSpec, StackdriverSpec, VmTierSpec, ZoneSpec} from 'java/com/google/cloud/deploymentmanager/autogen/deployment_package_autogen_spec.proto';
import {SolutionMarketingInfo} from 'java/com/google/cloud/deploymentmanager/autogen/marketing_info.proto';


{template projectIdProperty kind="text"}
- name: project_id
  description: {constants.PROJECT_ID_VAR_DESC}
  varType: string
  required: true
{/template}


{template deploymentNameProperty kind="text"}
- name: goog_cm_deployment_name
  description: {constants.DEPLOYMENT_NAME_VAR_DESC}
  varType: string
  required: true
{/template}


{template bootDiskProperties kind="text"}
{@param spec: DiskSpec}
{@param? tier: VmTierSpec|null}
- name: {'boot_disk_type' |tierprefixed: $tier}
  description: {constants.BOOT_DISK_TYPE_VAR_DESC}
  varType: string
  defaultValue: {$spec.getDiskType()!.getDefaultType()}
  required: true
- name: {'boot_disk_size' |tierprefixed: $tier}
  description: {constants.BOOT_DISK_SIZE_VAR_DESC}
  varType: integer
  defaultValue: {$spec.getDiskSize()!.getDefaultSizeGb()}
  required: true
{/template}


{template zoneProperty kind="text"}
{@param name: string}
{@param? zoneSpec: ZoneSpec|null}
- name: {$name}
  description: {constants.ZONE_VAR_DESC}
  varType: string
  {if $zoneSpec and $zoneSpec.getDefaultZone()}
  defaultValue: {$zoneSpec.getDefaultZone()}
  required: true
  {/if}
{/template}


{template imageProperty kind="text"}
{@param name: string}
{@param imagesList: list<ImageSpec>}
{@param? tier: VmTierSpec|null}
- name: {$name |tierprefixed: $tier}
  description: {constants.SOURCE_IMAGE_VAR_DESC}
  varType: string
  defaultValue: projects/{$imagesList[0].getProject()}/global/images/{$imagesList[0].getName()}
{/template}


{template machineTypeProperty kind="text"}
{@param name: string}
{@param spec: MachineTypeSpec}
{@param? tier: VmTierSpec|null}
- name: {$name |tierprefixed: $tier}
  description: {constants.MACHINE_TYPE_VAR_DESC}
  varType: string
  defaultValue: {$spec.getDefaultMachineType()!.getGceMachineType()}
  required: true
{/template}


{template acceleratorProperties kind="text"}
{@param namePrefix: string}
{@param spec: AcceleratorSpec}
{@param? tier: VmTierSpec|null}
- name: {$namePrefix + '_type' |tierprefixed: $tier}
  description: {constants.ACCELERATOR_TYPE_VAR_DESC}
  varType: string
  defaultValue: {$spec.getDefaultType()}
- name: {$namePrefix + '_count' |tierprefixed: $tier}
  description: {constants.ACCELERATOR_COUNT_VAR_DESC}
  varType: integer
  defaultValue: {$spec.getDefaultCount() ?? 0}
{/template}


{template networkProperties kind="text"}
{@param nameSuffix: string}
{@param spec: NetworkInterfacesSpec}
{@param? tier: VmTierSpec|null}
{let $networkPropName: tierPrefixed($nameSuffix, $tier) /}
- name: {$networkPropName}
  description: {constants.NETWORKS_VAR_DESC}
  varType: list(string)
  defaultValue:
  - default
  required: true
- name: {'sub' + $nameSuffix |tierprefixed: $tier}
  description: {constants.SUB_NETWORKS_VAR_DESC}
  varType: list(string)
- name: {'external_ips' |tierprefixed: $tier}
  description: {constants.EXTERNAL_IPS_VAR_DESC}
  varType: list(string)
  defaultValue:
  - EPHEMERAL
{/template}


{template firewallProperties kind="text"}
{@param spec: FirewallRuleSpec}
{@param? tierSpec: VmTierSpec|null}
{let $firewallPropName kind="text"}
  {call util.firewallRuleVarName}
    {param spec: $spec /}
    // TODO: support tiers for multi-VM
  {/call}
{/let}
{let $firewallSourceRangesPropName kind="text"}
  {call util.firewallRuleSourceRangesVarName}
    {param spec: $spec /}
    // TODO: support tiers for multi-VM
  {/call}
{/let}
- name: {$firewallPropName}
  description: {call util.firewallVariableDescription}{param spec: $spec /}{/call}
  varType: bool
  defaultValue: {not $spec.getDefaultOff()}
- name: {$firewallSourceRangesPropName}
  description: {call util.firewallSourceRangesVarDescription}{param spec: $spec /}{/call}
  varType: string
  required: true
{/template}


{template ipForwardingProperty kind="text"}
{@param name: string}
{@param spec: IpForwardingSpec}
{@param? tier: VmTierSpec|null}
- name: {$name |tierprefixed: $tier}
  varType: bool
  defaultValue: {not $spec.getDefaultOff()}
{/template}

{template additionalDisksProperties kind="text"}
{@param diskSpecs: list<DiskSpec>}
  {for $spec, $index in $diskSpecs}
    {call additionalDisksProperty}
      {param spec: $spec /}
      {param index: $index /}
    {/call}
  {/for}
{/template}

{template additionalDisksProperty kind="text"}
{@param spec: DiskSpec}
{@param index: number}
{let $diskSizeDescription}
  {call util.diskSizeDescription}
    {param spec: $spec /}
  {/call}
{/let}
- name: disk{$index+1}_size
  description: {$diskSizeDescription}
  varType: number
  defaultValue: {$spec.getDiskSize()!.getDefaultSizeGb()}
- name: disk{$index+1}_type
  description: {$spec.getDisplayLabel()}
  varType: string
  defaultValue: {$spec.getDiskType()!.getDefaultType()}
{/template}

{template deployInputProperties kind="text"}
{@param inputSpec: DeployInputSpec}
{@param? tierSpec: VmTierSpec|null}
// TODO: support tiers section for multi-VMs
{let $fields: listDeployInputFields($inputSpec)/}
{for $field in $fields}
{let $fieldProp kind="text"}
  {call deployInputField}{param field: $field /}{/call}
{/let}
{$fieldProp}{nil}
{/for}
{/template}


{template deployInputField visibility="private" kind="text"}
{@param field: DeployInputField}
- name: {$field.getName() |yamlprimitive: 2}
  description: {$field.getDescription() |yamlprimitive: 2}
  required: {$field.getRequired()}
{if $field.getBooleanCheckbox()}
  varType: bool
  defaultValue: {$field.getBooleanCheckbox().getDefaultValue() |yamlprimitive: 2}
{elseif $field.getGroupedBooleanCheckbox()}
  varType: bool
  defaultValue: {$field.getGroupedBooleanCheckbox().getDefaultValue() |yamlprimitive: 2}
{elseif $field.getIntegerBox()}
  {let $box: $field.getIntegerBox() /}
  varType: integer
  {if $box.getDefaultValue()}
  defaultValue: {$box.getDefaultValue().getValue() ?? 0}
  {/if}
{elseif $field.getIntegerDropdown()}
  {let $dropdown: $field.getIntegerDropdown()/}
  varType: integer
  {if $dropdown.getDefaultValueIndex()}
  {let $defaultIndex: $dropdown.getDefaultValueIndex().getValue() ?? 0 /}
  defaultValue: {$dropdown.getValuesList()[$defaultIndex]}
  {/if}
{elseif $field.getStringBox()}
  {let $box: $field.getStringBox() /}
  varType: string
  {if $box.getDefaultValue()}
  defaultValue: {$box.getDefaultValue() |yamlprimitive: 2}
  {/if}
{elseif $field.getEmailBox()}
  {let $box: $field.getEmailBox()/}
  varType: string
  {if $box.getDefaultValue()}
  defaultValue: {$box.getDefaultValue() |yamlprimitive: 2}
  {/if}
{elseif $field.getStringDropdown()}
  {let $dropdown: $field.getStringDropdown()/}
  varType: string
  {if $dropdown.getDefaultValueIndex()}
  {let $defaultIndex: $dropdown.getDefaultValueIndex().getValue() ?? 0 /}
  defaultValue: {$dropdown.getValuesList()[$defaultIndex] |yamlprimitive: 2}
  {/if}
{elseif $field.getZoneDropdown()}
  {let $dropdown: $field.getZoneDropdown()/}
  varType: string
  {if $dropdown.getDefaultValue()}
  defaultValue: {$dropdown.getDefaultValue().getValue() ?? '' |yamlprimitive: 2}
  {/if}
{/if}
{/template}


{template passwordOutputs kind="text"}
{@param specList: list<PasswordSpec>}
{for $spec, $index in $specList}
  {call passwordOutput}
    {param password: $spec /}
  {/call}
{/for}
{/template}


{template passwordOutput kind="text"}
{@param password: PasswordSpec}
{let $sanitizedPasswordLabel}
  {call util.sanitizePasswordLabel}
    {param spec: $password /}
  {/call}
{/let}
{let $passwordDescription}
  {call util.passwordOutputDescription}
    {param spec: $password /}
  {/call}
{/let}
{let $usernameDescription}
  {call util.usernameOutputDescription}
    {param spec: $password /}
  {/call}
{/let}
{if $password.getUsername() or $password.getUsernameFromDeployInputField()}
- name: {$sanitizedPasswordLabel}_user
  description: {$usernameDescription}
{/if}
- name: {$sanitizedPasswordLabel}_password
  description: {$passwordDescription}
{/template}


{template softwareGroups kind="text"}
{@param solutionInfo: SolutionMarketingInfo}
{if $solutionInfo?.getPackagedSoftwareGroupsList()}
softwareGroups:
{for $softwareGroup in $solutionInfo.getPackagedSoftwareGroupsList()}
{switch $softwareGroup.getType()}
{case 1}
- type: SG_OS
  software:
{default}
- software:
{/switch}
{for $component in $softwareGroup.getComponentsList()}
  - title: {$component.getName()}
    {if $component.getVersion()}
    version: {$component.getVersion()}
    {/if}
    {if $component.getUrl()}
    url: {$component.getUrl()}
    {/if}
    {if $component.getLicenseUrl()}
    licenseUrl: {$component.getLicenseUrl()}
    {/if}
{/for}
{/for}
{/if}
{/template}
