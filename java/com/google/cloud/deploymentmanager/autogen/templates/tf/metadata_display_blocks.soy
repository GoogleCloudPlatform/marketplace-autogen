{namespace metadata.display.blocks}

import * as util from 'com/google/cloud/deploymentmanager/autogen/templates/tf/util.soy';
import {AcceleratorSpec, DeployInputField, DeployInputSection, DeployInputSpec, DiskSpec, FirewallRuleSpec, ImageSpec, IpForwardingSpec, MachineTypeSpec, NetworkInterfacesSpec, StackdriverSpec, VmTierSpec, ZoneSpec, GcpAuthScopeSpec, SingleVmDeploymentPackageSpec, MultiVmDeploymentPackageSpec} from 'java/com/google/cloud/deploymentmanager/autogen/deployment_package_autogen_spec.proto';


{template projectIdPropertyDisplay kind="text"}
project_id:
  name: project_id
  title: Project Id
  invisible: true
{/template}


{template deploymentNamePropertyDisplay kind="text"}
goog_cm_deployment_name:
  name: goog_cm_deployment_name
  title: Goog Cm Deployment Name
{/template}

{template stackdriverPropertyDisplay kind="text"}
{@param stackdriver: StackdriverSpec}
{if $stackdriver?.getLogging()}
enable_cloud_logging:
  name: enable_cloud_logging
  title: Enable Cloud Logging
  tooltip: 'Cloud Logging allows you to store, search, analyze, monitor, and alert on log data and events. <a href="https://cloud.google.com/logging/">Learn more</a>'
  section: google_cloud_operations
{/if}
{if $stackdriver?.getMonitoring()}
enable_cloud_monitoring:
  name: enable_cloud_monitoring
  title: Enable Cloud Monitoring
  tooltip: 'Cloud Monitoring provides visibility into the performance, uptime, and overall health of cloud-powered applications. <a href="https://cloud.google.com/monitoring/">Learn more</a>'
  section: google_cloud_operations
{/if}
{/template}

{template stackdriverBottomSections kind="text"}
{@param stackdriver: StackdriverSpec}
{if $stackdriver?.getLogging() || $stackdriver?.getMonitoring()}
- name: google_cloud_operations
  title: Google Cloud Operations
  subtext: Monitoring and management for services, containers, applications, and infrastructure
{/if}
{/template}

{template bootDiskPropertiesDisplay kind="text"}
{@param spec: DiskSpec}
{@param zonePropertyName: string}
{@param? tier: VmTierSpec|null}
{'boot_disk_type' |tierprefixed: $tier}:
  name: {'boot_disk_type' |tierprefixed: $tier}
  title: Boot disk type
  {if $tier}
  section: {call tierSectionName}{param tier: $tier/}{/call}
  {else}
  section: boot_disk
  {/if}
  xGoogleProperty:
    type: ET_GCE_DISK_TYPE
    zoneProperty: {$zonePropertyName}
{'boot_disk_size' |tierprefixed: $tier}:
  name: {'boot_disk_size' |tierprefixed: $tier}
  title: Boot disk size in GB
  {if $spec.getDiskSize()!.getMinSizeGb()}
  min: {$spec.getDiskSize()!.getMinSizeGb()}
  {/if}
  max: 10000
  {if $tier}
  section: {call tierSectionName}{param tier: $tier/}{/call}
  {else}
  section: boot_disk
  {/if}
  xGoogleProperty:
    type: ET_GCE_DISK_SIZE
    gceDiskSize:
      diskTypeVariable: {'boot_disk_type' |tierprefixed: $tier}
{/template}


{template zonePropertyDisplay kind="text"}
{@param name: string}
{@param solutionHasGpus: bool}
{@param? zoneSpec: ZoneSpec|null}
{$name}:
  name: {$name}
  title: Zone
  {if $solutionHasGpus}
  subtext: 'GPU availability is limited to certain zones. <a href="https://cloud.google.com/compute/docs/gpus">Learn more</a>'
  {/if}
  xGoogleProperty:
    type: ET_GCE_ZONE
    {if $zoneSpec && (length($zoneSpec.getWhitelistedZonesList()) > 0 ||
      length($zoneSpec.getWhitelistedRegionsList()) > 0)}
    gceZone:
      {if length($zoneSpec.getWhitelistedZonesList()) > 0}
      allowlistedZones:
      {for $zone in $zoneSpec.getWhitelistedZonesList()}
      - {$zone}
      {/for}
      {/if}
      {if length($zoneSpec.getWhitelistedRegionsList()) > 0}
      allowlistedRegions:
      {for $region in $zoneSpec.getWhitelistedRegionsList()}
      - {$region}
      {/for}
      {/if}
    {/if}
{/template}


{template imagePropertyDisplay kind="text"}
{@param name: string}
{@param imagesList: list<ImageSpec>}
{@param? tier: VmTierSpec|null}
{$name |tierprefixed: $tier}:
  name: {$name |tierprefixed: $tier}
  title: Image version
  enumValueLabels:
  {for $image, $index in $imagesList}
  {let $label kind="text"}
    {if $image.getLabel()}
      {$image.getLabel()}{nil}
    {else}
      {$image.getName()}{nil}
    {/if}
  {/let}
    - label: {$label}
      value: projects/{$image.getProject()}/global/images/{$image.getName()}
  {/for}
  {if $tier}
  section: {call tierSectionName}{param tier: $tier/}{/call}
  {/if}
  xGoogleProperty:
    type: ET_GCE_DISK_IMAGE
{/template}


{template machineTypePropertyDisplay kind="text"}
{@param name: string}
{@param spec: MachineTypeSpec}
{@param zonePropertyName: string}
{@param? tier: VmTierSpec|null}
{$name |tierprefixed: $tier}:
  name: {$name |tierprefixed: $tier}
  title: Machine type
  {if $tier}
  section: {call tierSectionName}{param tier: $tier/}{/call}
  {/if}
  xGoogleProperty:
    type: ET_GCE_MACHINE_TYPE
    zoneProperty: {$zonePropertyName}
    {if $spec.getMinimum()}
    gceMachineType:
      {if $spec.getMinimum().getCpu()}
      minCpu: {$spec.getMinimum().getCpu()}
      {/if}
      {if $spec.getMinimum().getRamGb()}
      minRamGb: {$spec.getMinimum().getRamGb()}
      {/if}
    {/if}
{/template}


{template acceleratorPropertiesDisplay kind="text"}
{@param namePrefix: string}
{@param spec: AcceleratorSpec}
{@param? tier: VmTierSpec|null}
{$namePrefix + '_type' |tierprefixed: $tier}:
  name: {$namePrefix + '_type' |tierprefixed: $tier}
  title: GPUs
  {if $tier}
  section: {call tierSectionName}{param tier: $tier/}{/call}
  {/if}
  xGoogleProperty:
    type: ET_GCE_GPU_TYPE
    gceGpuType:
      machineType: {'machine_type' |tierprefixed: $tier}
      gpuType:
      {for $gpuType in $spec.getTypesList()}
        - {$gpuType}
      {/for}
{$namePrefix + '_count' |tierprefixed: $tier}:
  name: {$namePrefix + '_count' |tierprefixed: $tier}
  title: GPU Count
  {if $spec.getMinCount() > 0}
  min: {$spec.getMinCount()}
  {/if}
  xGoogleProperty:
    type: ET_GCE_GPU_COUNT
    gceGpuCount:
      machineTypeVariable: {'machine_type' |tierprefixed: $tier}
{/template}


{template networkPropertiesDisplay kind="text"}
{@param nameSuffix: string}
{@param zonePropertyName: string}
{@param spec: NetworkInterfacesSpec}
{@param? tier: VmTierSpec|null}
{let $networkPropName: tierPrefixed($nameSuffix, $tier) /}
{$networkPropName}:
  name: {$networkPropName}
  title: Network name
  minItems: {$spec.getMinCount()}
  maxItems: {$spec.getMaxCount()}
  {if $tier}
  section: {call tierSectionName}{param tier: $tier/}{/call}
  {else}
  section: networking
  {/if}
  xGoogleProperty:
    type: ET_GCE_NETWORK
    gceNetwork:
      allowSharedVpcs: true
      machineTypeVariable: {'machine_type' |tierprefixed: $tier}
    {if length($spec.getLabelsList()) > 0}
      labels:
      {for $label in $spec.getLabelsList()}
      - {$label}
      {/for}
    {/if}
{'sub_' + $nameSuffix |tierprefixed: $tier}:
  name: {'sub' + $nameSuffix |tierprefixed: $tier}
  title: Subnetwork name
  minItems: {$spec.getMinCount()}
  maxItems: {$spec.getMaxCount()}
  {if $tier}
  section: {call tierSectionName}{param tier: $tier/}{/call}
  {else}
  section: networking
  {/if}
  xGoogleProperty:
    type: ET_GCE_SUBNETWORK
    zoneProperty: {$zonePropertyName}
    gceSubnetwork:
      networkVariable: {$networkPropName}
{'external_ips' |tierprefixed: $tier}:
  name: {'external_ips' |tierprefixed: $tier}
  title: External IP
  tooltip: 'An external IP address associated with this instance. Selecting "None" will result in the instance having no external internet access. <a href="https://cloud.google.com/compute/docs/configure-instance-ip-addresses">Learn more</a>'
  minItems: {$spec.getMinCount()}
  maxItems: {$spec.getMaxCount()}
  {if $tier}
  section: {call tierSectionName}{param tier: $tier/}{/call}
  {else}
  section: networking
  {/if}
  xGoogleProperty:
    type: ET_GCE_EXTERNAL_IP
    gceExternalIp:
      networkVariable: {$networkPropName}
      notConfigurable: {$spec.getExternalIp()!.getNotConfigurable()}
      allowStaticIps: true
{/template}

{template firewallPropertiesDisplay kind="text"}
{@param spec: FirewallRuleSpec}
{@param? tier: VmTierSpec|null}
{let $firewallPropName kind="text"}
  {call util.firewallRuleVarName}
    {param spec: $spec /}
  {/call}
{/let}
{let $firewallSourceRangesPropName kind="text"}
  {call util.firewallRuleSourceRangesVarName}
    {param spec: $spec /}
  {/call}
{/let}
{$firewallPropName |tierprefixed: $tier}:
  name: {$firewallPropName |tierprefixed: $tier}
  title: {call util.firewallVariableDescription}{param spec: $spec /}{/call}
  {if $tier}
  section: {call tierSectionName}{param tier: $tier/}{/call}
  {else}
  section: networking
  {/if}
  xGoogleProperty:
    type: ET_GCE_FIREWALL
    gceFirewall:
      networkVariable: {'networks' |tierprefixed: $tier}
{if $spec.getAllowedSource() == FirewallRuleSpec.TrafficSource.PUBLIC}
{$firewallSourceRangesPropName |tierprefixed: $tier}:
  name: {$firewallSourceRangesPropName |tierprefixed: $tier}
  title: {call util.firewallSourceRangesVarDescription}{param spec: $spec /}{/call}
  tooltip: 'Traffic is only allowed from sources within these IP address ranges. Use CIDR notation when entering ranges. <a href="https://cloud.google.com/compute/docs/networking#firewalls">Learn more</a>'
  placeholder: '0.0.0.0/0, 192.169.0.2/24'
  {if $tier}
  section: {call tierSectionName}{param tier: $tier/}{/call}
  {else}
  section: networking
  {/if}
  xGoogleProperty:
    type: ET_GCE_FIREWALL_RANGE
    gceFirewallRange:
      firewallVariable: {$firewallPropName |tierprefixed: $tier}
{/if}
{/template}


{template ipForwardingPropertyDisplay kind="text"}
{@param name: string}
{@param spec: IpForwardingSpec}
{@param? tier: VmTierSpec|null}
{$name |tierprefixed: $tier}:
  name: {$name |tierprefixed: $tier}
  title: IP forwarding
  tooltip: 'Forwarding allows the instance to help route packets. <a href="https://cloud.google.com/compute/docs/networking#canipforward">Learn more</a>'
  {if $tier}
  section: {call tierSectionName}{param tier: $tier/}{/call}
  {else}
  section: networking
  {/if}
  level: 1
  xGoogleProperty:
    type: ET_GCE_IP_FORWARDING
    gceIpForwarding:
      networkVariable: {'networks' |tierprefixed: $tier}
      notConfigurable: {$spec.getNotConfigurable()}
{/template}

{template additionalDisksPropertiesDisplay kind="text"}
{@param diskSpecs: list<DiskSpec>}
{@param zonePropertyName: string}
{@param? tier: VmTierSpec|null}
  {for $spec, $index in $diskSpecs}
    {call additionalDisksPropertyDisplay}
      {param spec: $spec /}
      {param index: $index /}
      {param zonePropertyName: $zonePropertyName /}
      {param tier: $tier /}
    {/call}
  {/for}
{/template}

{template additionalDisksPropertyDisplay kind="text"}
{@param spec: DiskSpec}
{@param index: number}
{@param zonePropertyName: string}
{@param? tier: VmTierSpec|null}
{let $diskTypeVariable kind="text"}
  {'disk' + ($index + 1) + '_type' |tierprefixed: $tier}{nil}
{/let}
{let $diskSizeVariable kind="text"}
  {'disk' + ($index + 1) + '_size' |tierprefixed: $tier}{nil}
{/let}
{$diskSizeVariable}:
  name: {$diskSizeVariable}
  title: {$spec.getDisplayLabel() + ' size in GB' |yamlprimitive: 2}
  min: {$spec.getDiskSize()!.getMinSizeGb()}
  max: 10000
  {if $tier}
  section: {call tierSectionName}{param tier: $tier/}{/call}
  {else}
  section: additional_disks
  {/if}
  xGoogleProperty:
    type: ET_GCE_DISK_SIZE
    gceDiskSize:
      diskTypeVariable: {$diskTypeVariable}
{$diskTypeVariable}:
  name: {$diskTypeVariable}
  title: {$spec.getDisplayLabel() + ' type' |yamlprimitive: 2}
  {if $tier}
  section: {call tierSectionName}{param tier: $tier/}{/call}
  {else}
  section: additional_disks
  {/if}
  xGoogleProperty:
    type: ET_GCE_DISK_TYPE
    zoneProperty: {$zonePropertyName}
{/template}

{template deployInputPropertiesDisplay kind="text"}
{@param spec: DeployInputSpec}
{@param? tierList: list<VmTierSpec>|null}
{for $section in $spec.getSectionsList()}
{for $field in $section.getFieldsList()}
{let $fieldDisplay kind="text"}
  {call deployInputFieldDisplay}
    {param section: $section /}
    {param field: $field /}
    {param tierList: $tierList /}
  {/call}
{/let}
{$fieldDisplay}{nil}
{/for}
{/for}
{/template}


{template deployInputFieldDisplay visibility="private" kind="text"}
{@param section: DeployInputSection}
{@param field: DeployInputField}
{@param? tierList: list<VmTierSpec>|null}
{$field.getName()}:
  name: {$field.getName() |yamlprimitive: 2}
  {if $field.getTitle()}
  title: {$field.getTitle() |yamlprimitive: 2}
  {/if}
  {if $field.getDescription()}
  subtext: {$field.getDescription() |yamlprimitive: 2}
  {/if}
  {if $field.getTooltip()}
  tooltip: {$field.getTooltip() |yamlprimitive: 2}
  {/if}
  {if $field.getLevel()}
  level: {$field.getLevel()}
  {/if}
  {if $section.getPlacement() == DeployInputSection.Placement.CUSTOM_TOP ||
      $section.getPlacement() == DeployInputSection.Placement.CUSTOM_BOTTOM}
  section: {$section.getName() |yamlprimitive: 2}
  {elseif $section.getPlacement() == DeployInputSection.Placement.TIER}
  section: {call tierSectionName}{param tier: findVmTier($section.getTier(), $tierList)/}{/call}
  {/if}

{if $field.getGroupedBooleanCheckbox()}
  {let $displayGroup: findDisplayGroup($field, $section)/}
  booleanGroup: {$displayGroup.getName() |yamlprimitive: 2}

{elseif $field.getIntegerBox()}
  {let $box: $field.getIntegerBox() /}
  {if $box.getPlaceholder()}
  placeholder: {$box.getPlaceholder() |yamlprimitive: 2}
  {/if}
  {if $box.getValidation()?.getMin()}
  min: {$box.getValidation()!.getMin()!.getValue() ?? 0}
  {/if}
  {if $box.getValidation()?.getMax()}
  max: {$box.getValidation()!.getMax()!.getValue() ?? 0}
  {/if}
  {if $box.getValidation()?.getDescription()}
  validation: {$box.getValidation()!.getDescription() |yamlprimitive: 2}
  {/if}

{elseif $field.getStringBox()}
  {let $box: $field.getStringBox() /}
  {if $box.getPlaceholder()}
  placeholder: {$box.getPlaceholder() |yamlprimitive: 2}
  {/if}
  {if $box.getValidation()?.getRegex()}
  regexValidation: {$box.getValidation().getRegex() |yamlprimitive: 2}
  {/if}
  {if $box.getValidation()?.getDescription()}
  validation: {$box.getValidation()!.getDescription() |yamlprimitive: 2}
  {/if}

{elseif $field.getEmailBox()}
  {let $box: $field.getEmailBox()/}
  {if $box.getPlaceholder()}
  placeholder: {$box.getPlaceholder() |yamlprimitive: 2}
  {/if}
  {if $box.getValidation()?.getRegex()}
  regexValidation: {$box.getValidation().getRegex() |yamlprimitive: 2}
  {/if}
  {if $box?.getValidation()?.getDescription()}
  validation: {$box.getValidation()!.getDescription() |yamlprimitive: 2}
  {/if}
  xGoogleProperty:
    type: ET_EMAIL_ADDRESS

{elseif $field.getZoneDropdown()}
  {let $box: $field.getZoneDropdown()/}
  xGoogleProperty:
    type: ET_GCE_ZONE
{/if}

{let $valueLabels: fieldValueLabelMap($field) ?? map() /}
{let $stringDropdownValuesList: $field.getStringDropdown()?.getValuesList() ?? [] /}
{let $integerDropdownValuesList: $field.getIntegerDropdown()?.getValuesList() ?? [] /}
{let $combinedDropdownValuesList: $stringDropdownValuesList.concat($integerDropdownValuesList) /}
{let $valueMap: map([record(key: $x + '', value: $x + '') for $x in $combinedDropdownValuesList]) /}
{let $combinedValueLabels: $valueMap.concat($valueLabels) /}

{if $combinedValueLabels.size > 0}
  enumValueLabels:
  {for $key in $combinedValueLabels.keys()}
    - label: {$combinedValueLabels.get($key) |yamlprimitive: 2}
      value: {$key |yamlprimitive: 4}
  {/for}
{/if}
{/template}


// Deploy input custom sections utilities

{template topSections kind="text"}
{@param? spec: DeployInputSpec|null}
{call customSectionsHelper}
  {param spec: $spec/}
  {param placement: DeployInputSection.Placement.CUSTOM_TOP/}
{/call}{nil}
{/template}


{template bottomSections kind="text"}
{@param? spec: DeployInputSpec|null}
{call customSectionsHelper}
  {param spec: $spec/}
  {param placement: DeployInputSection.Placement.CUSTOM_BOTTOM/}
{/call}{nil}
{/template}


{template customSectionsHelper visibility="private" kind="text"}
{@param? spec: DeployInputSpec|null}
{@param placement: DeployInputSection.Placement}
{if $spec}
{for $section in $spec.getSectionsList()}
{if $section.getPlacement() == $placement}
- name: {$section.getName() |yamlprimitive: 2}
  title: {$section.getTitle() |yamlprimitive: 2}
  {if $section.getTooltip()}
  tooltip: {$section.getTooltip() |yamlprimitive: 2}
  {/if}
  {if $section.getDescription()}
  subtext: {$section.getDescription() |yamlprimitive: 2}
  {/if}
{/if}
{/for}
{/if}
{/template}

{template gcpAuthScopesPropertyDisplay kind="text"}
{@param scope: GcpAuthScopeSpec.Scope}
{@param? tier: VmTierSpec|null}
{let $name kind="text"}
  {call util.gcpAuthScopePropertyName}
    {param scope: $scope/}
  {/call}
{/let}
{$name |tierprefixed: $tier}:
  name: {$name |tierprefixed: $tier}
  title: {call util.authScopeDescription}{param scope: $scope/}{/call}
  {if $tier}
  section: {call tierSectionName}{param tier: $tier/}{/call}
  {else}
  section: api_access
  {/if}
  booleanGroup: {call authScopeBoolGroupName}{param scope: $scope/}{param tier: $tier/}{/call}
{/template}

{template tierSectionName kind="text"}
{@param tier: VmTierSpec}
{$tier.getName() + '_tier' |lowercased}{nil}
{/template}

{template authScopeBooleanGroups kind="text"}
{@param? singleVmSpec: SingleVmDeploymentPackageSpec|null}
{@param? multiVmSpec: MultiVmDeploymentPackageSpec|null}
{if $singleVmSpec && $singleVmSpec.getGcpAuthScopesList()}
{for $spec in $singleVmSpec.getGcpAuthScopesList()}
- name: {call authScopeBoolGroupName}{param scope: $spec.getScope()/}{/call}
  title: {call authScopeBoolGroupTitle}{param scope: $spec.getScope()/}{/call}
{/for}

{else}

{for $tier in $multiVmSpec!.getTiersList()}
{for $spec in $tier.getGcpAuthScopesList()}
- name: {call authScopeBoolGroupName}{param scope: $spec.getScope()/}{param tier: $tier/}{/call}
  title: {call authScopeBoolGroupTitle}{param scope: $spec.getScope()/}{/call}
{/for}
{/for}
{/if}
{/template}

{template authScopeBoolGroupName kind="text"}
{@param scope: GcpAuthScopeSpec.Scope}
{@param? tier: VmTierSpec|null}
{if $tier}
{call tierSectionName}{param tier: $tier/}{/call}_{nil}
{/if}
{switch $scope}
  {case GcpAuthScopeSpec.Scope.CLOUD_PLATFORM_READONLY}
    cloud_platform_readonly_api_access{nil}
  {case GcpAuthScopeSpec.Scope.CLOUD_PLATFORM}
    cloud_platform_api_access{nil}
  {case GcpAuthScopeSpec.Scope.COMPUTE_READONLY}
    compute_readonly_api_access{nil}
  {case GcpAuthScopeSpec.Scope.COMPUTE}
    compute_api_access{nil}
  {case GcpAuthScopeSpec.Scope.SOURCE_READ_WRITE}
    source_read_write_api_access{nil}
  {case GcpAuthScopeSpec.Scope.PROJECTHOSTING}
    project_hosting_api_access{nil}
{/switch}
{/template}

{template authScopeBoolGroupTitle kind="text"}
{@param scope: GcpAuthScopeSpec.Scope}
{switch $scope}
  {case GcpAuthScopeSpec.Scope.CLOUD_PLATFORM_READONLY}
    Google Cloud Platform Readonly API{nil}
  {case GcpAuthScopeSpec.Scope.CLOUD_PLATFORM}
    Google Cloud Platform API{nil}
  {case GcpAuthScopeSpec.Scope.COMPUTE_READONLY}
    Compute Readonly API{nil}
  {case GcpAuthScopeSpec.Scope.COMPUTE}
    Compute API{nil}
  {case GcpAuthScopeSpec.Scope.SOURCE_READ_WRITE}
    Cloud Source Repositories Readwrite API{nil}
  {case GcpAuthScopeSpec.Scope.PROJECTHOSTING}
    (Deprecated) Code Project Hosting APIs{nil}
{/switch}
{/template}

{template customBooleanGroups kind="text"}
{@param? spec: DeployInputSpec|null}
{if $spec}
{for $section in $spec.getSectionsList()}
{for $field in $section.getFieldsList()}
{if $field.getGroupedBooleanCheckbox() && $field.getGroupedBooleanCheckbox().getDisplayGroup()}
{let $group: $field.getGroupedBooleanCheckbox().getDisplayGroup()/}
- name: {$group.getName() |yamlprimitive: 2}
  title: {$group.getTitle() |yamlprimitive: 2}
  {if $group.getTooltip()}
  tooltip: {$group.getTooltip() |yamlprimitive: 2}
  {/if}
  {if $group.getDescription()}
  subtext: {$group.getDescription() |yamlprimitive: 2}
  {/if}
{/if}
{/for}
{/for}
{/if}
{/template}
