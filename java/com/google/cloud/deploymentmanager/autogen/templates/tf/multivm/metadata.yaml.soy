{namespace vm.multi.metadata}

import * as blocks from 'com/google/cloud/deploymentmanager/autogen/templates/tf/metadata_blocks.soy';
import * as constants from 'com/google/cloud/deploymentmanager/autogen/templates/tf/constants.soy';
import * as util from 'com/google/cloud/deploymentmanager/autogen/templates/tf/util.soy';
import {MultiVmDeploymentPackageSpec, VmTierSpec} from 'java/com/google/cloud/deploymentmanager/autogen/deployment_package_autogen_spec.proto';
import {SolutionMarketingInfo} from 'java/com/google/cloud/deploymentmanager/autogen/marketing_info.proto';

{template main kind="text"}
{@param spec: MultiVmDeploymentPackageSpec}
{@param solutionId: string}
{@param? solutionInfo: SolutionMarketingInfo|null}
{@param? templateVersion: string|null}

apiVersion: blueprints.cloud.google.com/v1alpha1
kind: BlueprintMetadata
metadata:
  name: marketplace-tools
  annotations:
    autogenSpecType: MULTI_VM
    config.kubernetes.io/local-config: "true"
spec:
  info:
    title: Google Cloud Marketplace Terraform Module
    {if $templateVersion}
    version: {$templateVersion |yamlprimitive: 4}
    {else}
    version: "1.0"
    {/if}
    actuationTool:
      flavor: Terraform
      version: ">= 1.2"
    description: {lb}{rb}
    {if $solutionInfo}
      {let $softwareGroups kind="text"}
        {call blocks.softwareGroups}
          {param solutionInfo: $solutionInfo /}
        {/call}
      {/let}
      {$softwareGroups |indent: 4, true}{nil}
    {/if}
  content:
    subBlueprints:
  {for $tier in $spec.getTiersList()}
      - name: {$tier.getName()}
        location: modules/{$tier.getName()}
  {/for}
  interfaces:
    variables:
    {let $projectIdProp kind="text"}
      {call blocks.projectIdProperty}
      {/call}
    {/let}
    {$projectIdProp |indent: 6, true}{nil}

    {let $deploymentNameProp kind="text"}
      {call blocks.deploymentNameProperty}
      {/call}
    {/let}
    {$deploymentNameProp |indent: 6, true}{nil}

    {let $zoneProp kind="text"}
      {call blocks.zoneProperty}
        {param name: 'zone'/}
        {param zoneSpec: $spec.getZone()/}
      {/call}
    {/let}
    {$zoneProp |indent: 6, true}{nil}

    {if $spec.getDeployInput()}
    {let $deployInputProps kind="text"}
      {call blocks.deployInputProperties}
        {param inputSpec: $spec.getDeployInput() /}
      {/call}
    {/let}
    {$deployInputProps |indent: 6, true}{nil}
    {/if}

    {let $stackdriver kind="text"}
      {call blocks.stackdriver}
        {param stackdriver: $spec.getStackdriver() /}
      {/call}
    {/let}
    {$stackdriver |indent: 6, true}{nil}

    {for $tier in $spec.getTiersList()}
    {let $tierVariablesMetadata kind="text"}
      {call tierVariables}
        {param tier: $tier/}
      {/call}
    {/let}
    {$tierVariablesMetadata |indent: 6, true}{nil}
    {/for}
    outputs:
      - name: total_instance_count
        description: {constants.TOTAL_INSTANCE_COUNT_OUT_DESC}
    {if $spec.getSiteUrl()}
      - name: site_url
        description: {constants.SITE_URL_OUT_DESC}
    {/if}
    {if $spec.getAdminUrl()}
      - name: admin_url
        description: {constants.ADMIN_URL_OUT_DESC}
    {/if}
    {let $passwordOutputs}
      {call blocks.passwordOutputs}
        {param specList: $spec.getPasswordsList() /}
      {/call}
    {/let}
    {$passwordOutputs |indent: 6, true}{nil}
{/template}

{template tierVariables kind="text" visibility="private"}
{@param tier: VmTierSpec}
{let $instanceCount: $tier.getInstanceCount()!/}
- name: {'instance_count' |tierprefixed: $tier}
{if $instanceCount.getDescription()}
  description: "{$instanceCount.getDescription() |yamlprimitive: 2}"
{elseif $instanceCount.getTooltip()}
  description: "{$instanceCount.getTooltip() |yamlprimitive: 2}"
{/if}
  varType: integer
  defaultValue: {$instanceCount.getDefaultValue()}

{call blocks.imageProperty}
  {param name: 'source_image'/}
  {param imagesList: $tier.getImagesList() /}
  {param tier: $tier /}
{/call}

{call blocks.machineTypeProperty}
  {param name: 'machine_type' /}
  {param spec: $tier.getMachineType()! /}
  {param tier: $tier /}
{/call}

{if length($tier.getAcceleratorsList()) > 0}
{call blocks.acceleratorProperties}
  {param namePrefix: 'accelerator' /}
  {param spec: $tier.getAcceleratorsList()[0] /}
  {param tier: $tier /}
{/call}
{/if}

{call blocks.bootDiskProperties}
  {param spec: $tier.getBootDisk()! /}
  {param tier: $tier /}
{/call}

{if $tier.getAdditionalDisksList()}
{call blocks.additionalDisksProperties}
  {param diskSpecs: $tier.getAdditionalDisksList() /}
  {param tier: $tier /}
{/call}
{/if}

{call blocks.networkProperties}
  {param nameSuffix: 'networks' /}
  {param spec: $tier.getNetworkInterfaces()! /}
  {param tier: $tier /}
{/call}

{for $firewallRule in $tier.getFirewallRulesList()}
{call blocks.firewallProperties}
  {param spec: $firewallRule /}
  {param tier: $tier /}
{/call}
{/for}

{if $tier.getIpForwarding()}
  {call blocks.ipForwardingProperty}
    {param name: 'ip_forward' /}
    {param spec: $tier.getIpForwarding() /}
    {param tier: $tier /}
  {/call}
{/if}

{if $tier.getGcpAuthScopesList()}
{call blocks.gcpAuthScopesProperties}
  {param specs: $tier.getGcpAuthScopesList() /}
  {param tier: $tier /}
{/call}
{/if}

{/template}