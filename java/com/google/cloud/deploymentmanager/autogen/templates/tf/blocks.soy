/**
 * Contains Terraform blocks shared between single and multi-vm templates
 */
{namespace blocks}


import * as constants from 'com/google/cloud/deploymentmanager/autogen/templates/tf/constants.soy';
import * as util from 'com/google/cloud/deploymentmanager/autogen/templates/tf/util.soy';
import {AcceleratorSpec, ApplicationStatusSpec, DeployInputField, DeployInputSpec, DiskSpec, FirewallRuleSpec, GceMetadataItem, GceStartupScriptSpec, GcpAuthScopeSpec, ImageSpec, InstanceUrlSpec, IpForwardingSpec, LocalSsdSpec, MachineTypeSpec, NetworkInterfacesSpec, PasswordSpec, StackdriverSpec, VmTierSpec, ZoneSpec} from 'java/com/google/cloud/deploymentmanager/autogen/deployment_package_autogen_spec.proto';

/**
 * Produces a google_compute_firewall resource for each FirewallRuleSpec
 */
{template firewallResources kind="text"}
  {@param specList: list<FirewallRuleSpec>}
  {@param? tier: VmTierSpec|null}
  {for $spec in $specList}
    {\n}
    {call firewallResource}
      {param spec: $spec /}
      {param tier: $tier /}
    {/call}
  {/for}
{/template}


/**
 * Produces a google_compute_firewall resource
 */
{template firewallResource kind="text"}
{@param spec: FirewallRuleSpec}
{@param? tier: VmTierSpec|null}
{let $firewallNameSuffix}
  {call util.firewallRuleNameSuffix}{param spec: $spec/}{param tier: $tier/}{/call}
{/let}
{let $deploymentName: $tier ? 'deployment_name' : 'goog_cm_deployment_name' /}
resource "google_compute_firewall" {call util.firewallRuleResourceName}{param spec: $spec/}{/call} {lb}
  count = var.{call util.firewallRuleVarName}{param spec: $spec/}{/call} ? 1 : 0
{\n}
  name = "${lb}var.{$deploymentName}{rb}-{$firewallNameSuffix}"
  network = element(var.networks, 0)
{\n}
  allow {lb}{if $spec.getPort().length > 0}
    ports = ["{$spec.getPort()}"]{/if}
    protocol = "{call util.firewallRuleProtocol}{param spec: $spec/}{/call}"
  {rb}
{\n}
  source_ranges =  compact([for range in split(",", var.{call util.firewallRuleSourceRangesVarName}{param spec: $spec /}{/call}) : trimspace(range)])
{\n}
  target_tags = ["{call util.deploymentTag}{param tier: $tier/}{/call}"]
{rb}
{/template}



/**
 * Produces two terraform variables for each FirewallRuleSpec
 */
{template firewallVariables kind="text"}
  {@param specList: list<FirewallRuleSpec>}
  {@param? tier: VmTierSpec|null}

  {for $spec in $specList}
    {\n}
    {call firewallVariable}
      {param spec: $spec /}
      {param tier: $tier /}
    {/call}
    {\n}
    {call firewallSourceRangesVariable}
      {param spec: $spec /}
      {param tier: $tier /}
    {/call}
  {/for}
{/template}


/**
 * Produces a boolean variable determining whether a firewall resource is created
 */
{template firewallVariable kind="text"}
{@param spec: FirewallRuleSpec}
{@param? tier: VmTierSpec|null}
{let $varname}
  {call util.firewallRuleVarName}{param spec: $spec/}{/call}
{/let}
variable "{$varname |tierprefixed: $tier}" {lb}
  description = "{call util.firewallVariableDescription}{param spec: $spec/}{/call}"
  type        = bool
  default     = {not $spec.getDefaultOff()}
{rb}
{/template}

/**
 * Produces a string variable detemining the source range of a firewall resource
 */
{template firewallSourceRangesVariable kind="text"}
{@param spec: FirewallRuleSpec}
{@param? tier: VmTierSpec|null}
{let $varname}
  {call util.firewallRuleSourceRangesVarName}{param spec: $spec/}{/call}
{/let}
variable "{$varname |tierprefixed: $tier}" {lb}
  description = "{call util.firewallSourceRangesVarDescription}{param spec: $spec/}{/call}"
  type        = string
  default     = ""
{rb}
{/template}

/**
 * Produces two inputs in the README for each FirewallRuleSpec
 */
{template firewallReadme kind="text"}
  {@param specList: list<FirewallRuleSpec>}

  {for $spec in $specList}
    {let $firewallRuleVariable}
      {call util.firewallRuleVarName}{param spec: $spec/}{/call}
    {/let}
    {let $firewallRuleDescription}
      {call util.firewallVariableDescription}{param spec: $spec/}{/call}
    {/let}
    {let $firewallRangeVariable}
      {call util.firewallRuleSourceRangesVarName}{param spec: $spec/}{/call}
    {/let}
    {let $firewallRangeDescription}
      {call util.firewallSourceRangesVarDescription}{param spec: $spec/}{/call}
    {/let}

| {$firewallRuleVariable} | {$firewallRuleDescription} | `bool` | `{not $spec.getDefaultOff()}` | no |
| {$firewallRangeVariable} | {$firewallRangeDescription} | `string` | `""` | no |
  {/for}
{/template}

{template acceleratorVariables kind="text"}
{@param spec: AcceleratorSpec}
{@param? tier: VmTierSpec|null}
variable "{'accelerator_type' |tierprefixed: $tier}" {lb}
  description = "{constants.ACCELERATOR_TYPE_VAR_DESC}"
  type        = string
  default     = "{$spec.getDefaultType()}"
{rb}
{\n}
variable "{'accelerator_count' |tierprefixed: $tier}" {lb}
  description = "{constants.ACCELERATOR_COUNT_VAR_DESC}"
  type        = number
  default     = "{$spec.getDefaultCount() ?? 0}"
{rb}
{/template}

{template acceleratorReadme kind="text"}
{@param spec: AcceleratorSpec}
| accelerator_type | {constants.ACCELERATOR_TYPE_VAR_DESC} | `string` | `"{$spec.getDefaultType()}"` | no |
| accelerator_count | {constants.ACCELERATOR_COUNT_VAR_DESC} | `number` | `{$spec.getDefaultCount() ?? 0}` | no |
{/template}

{template additionalDiskVariables kind="text"}
{@param diskSpecs: list<DiskSpec>}
{@param? deployInput: DeployInputSpec|null}
  {for $spec, $index in $diskSpecs}
    {call additionalDiskVariable}
      {param spec: $spec /}
      {param index: $index /}
      {param deployInput: $deployInput /}
    {/call}
    {\n}
  {/for}
{/template}

{template additionalDiskVariable kind="text"}
{@param spec: DiskSpec}
{@param index: number}
{@param? deployInput: DeployInputSpec|null}
{let $diskSizeDescription}
  {call util.diskSizeDescription}
    {param spec: $spec /}
  {/call}
{/let}
variable "disk{$index+1}_type" {lb}
  description = "{$spec.getDisplayLabel() |doublequoted}"
  type        = string
  default     = "{$spec.getDiskType()!.getDefaultType()}"
{rb}
{\n}
variable "disk{$index+1}_size" {lb}
  description = "{$diskSizeDescription |doublequoted}"
  type        = number
  default     = {$spec.getDiskSize()!.getDefaultSizeGb()}
{rb}
{/template}

{template additionalDisksReadme kind="text"}
{@param diskSpecs: list<DiskSpec>}
{@param? deployInput: DeployInputSpec|null}
  {for $spec, $index in $diskSpecs}
    {call additionalDiskReadme}
      {param spec: $spec /}
      {param index: $index /}
      {param deployInput: $deployInput /}
    {/call}
  {/for}
{/template}

{template additionalDiskReadme kind="text"}
{@param spec: DiskSpec}
{@param index: number}
{@param? deployInput: DeployInputSpec|null}
{let $diskSizeDescription}
  {call util.diskSizeDescription}
    {param spec: $spec /}
  {/call}
{/let}
| disk{$index+1}_type | {$spec.getDisplayLabel() |markdowntable} | `string` | `"{$spec.getDiskType()!.getDefaultType()}"` | no |
| disk{$index+1}_size | {$diskSizeDescription |markdowntable} | `number` | `{$spec.getDiskSize()!.getDefaultSizeGb()}` | no |
{/template}

{template additionalDiskResources kind="text"}
  {@param diskSpecs: list<DiskSpec>}
  {@param? deployInput: DeployInputSpec|null}
  {for $spec, $index in $diskSpecs}
    {call additionalDiskResource}
      {param spec: $spec /}
      {param index: $index /}
      {param deployInput: $deployInput /}
    {/call}
    {\n}
  {/for}
{/template}

{template additionalDiskResource kind="text"}
{@param spec: DiskSpec}
{@param index: number}
{@param? deployInput: DeployInputSpec|null}
{let $deviceNameSuffix kind="text"}
  {if $spec.getDeviceNameSuffix()!.getName()}
    {$spec.getDeviceNameSuffix()!.getName()}{nil}
  {elseif $spec.getDeviceNameSuffix()!.getNameFromDeployInputField()}
    {let $field: findDeployInputField($spec.getDeviceNameSuffix()!.getNameFromDeployInputField(), $deployInput)/}
    ${lb}var.{$field.getName()}{rb}{nil}
  {/if}
{/let}
resource "google_compute_disk" "disk{$index + 1}" {lb}
  name = "${lb}var.goog_cm_deployment_name{rb}-vm-{$deviceNameSuffix}"
  type = var.disk{$index + 1}_type
  zone = var.zone
  size = var.disk{$index + 1}_size
{rb}
{/template}

{template attachDisks kind="text"}
  {@param diskSpecs: list<DiskSpec>}
  {@param? deployInput: DeployInputSpec|null}
  {for $spec, $index in $diskSpecs}
    {call attachDisk}
      {param index: $index /}
      {param deployInput: $deployInput /}
    {/call}
    {\n}
  {/for}
{/template}

{template attachDisk kind="text"}
{@param index: number}
{@param? deployInput: DeployInputSpec|null}
  attached_disk {lb}
    source      = google_compute_disk.disk{$index + 1}.id
    device_name = google_compute_disk.disk{$index + 1}.name
  {rb}
{/template}

{template localSsds kind="text"}
  {@param localSsdSpec: LocalSsdSpec}
  {@param? deployInput: DeployInputSpec|null}
  {let $field: findDeployInputField($localSsdSpec.getCountFromDeployInputField(), $deployInput)/}
  {let $count: ($localSsdSpec.getCount() != 0) ? $localSsdSpec.getCount() : ($field.getIntegerBox()?.getDefaultValue()?.getValue() ?? 0)/}
  {for $i in range(0, $count)}
  scratch_disk {lb}
    interface = "SCSI"
  {rb}
  {\n}
  {/for}
{/template}

{template passwordResources kind="text"}
  {@param specList: list<PasswordSpec>}

  {for $spec, $index in $specList}
    {\n}
    {call passwordResource}
      {param spec: $spec /}
    {/call}
  {/for}
{/template}

{template passwordResource kind="text"}
{@param spec: PasswordSpec}
{let $sanitizedPasswordLabel}
  {call util.sanitizePasswordLabel}
    {param spec: $spec /}
  {/call}
{/let}
resource "random_password" "{$sanitizedPasswordLabel}" {lb}
  length = {$spec.getLength()}
  special = {$spec.getAllowSpecialChars()}
{rb}
{/template}

{template passwordMetadata kind="text"}
  {@param specList: list<PasswordSpec>}
  {@param? passwordFromVar: bool|null}

  {for $spec, $index in $specList}
    {let $sanitizedPasswordLabel}
      {call util.sanitizePasswordLabel}
        {param spec: $spec /}
      {/call}
    {/let}

    {$spec.getMetadataKey()} = {nil}
    {if $passwordFromVar}
      var.{$sanitizedPasswordLabel}_password{nil}
    {else}
      random_password.{$sanitizedPasswordLabel}.result{nil}
    {/if}
    {if $index != $specList.length - 1}
      {\n}
    {/if}
  {/for}
{/template}

{template deployInputVariables kind="text"}
{@param spec: DeployInputSpec}
{let $fields: listDeployInputFields($spec)/}
{for $field in $fields}
  {\n}
  {call deployInputVariable}{param field: $field/}{/call}
{/for}
{/template}

{template deployInputVariable kind="text"}
{@param field: DeployInputField}
variable "{$field.getName()}" {lb}
{if $field.getDescription()}
  description = "{$field.getDescription() |doublequoted}"
{elseif $field.getTooltip()}
  description = "{$field.getTooltip() |doublequoted}"
{/if}
{if $field.getBooleanCheckbox()}
  type        = bool
  default     = {$field.getBooleanCheckbox().getDefaultValue()}
{elseif $field.getGroupedBooleanCheckbox()}
  type        = bool
  default     = {$field.getGroupedBooleanCheckbox().getDefaultValue()}
{elseif $field.getIntegerBox()}
  {let $box: $field.getIntegerBox()/}
  type        = number
  {if $box.getDefaultValue()}
  default     = {$box.getDefaultValue().getValue() ?? 0}
  {/if}
{elseif $field.getIntegerDropdown()}
  {let $dropdown: $field.getIntegerDropdown()/}
  type        = number
  {if $dropdown.getDefaultValueIndex()}
  {let $defaultIndex: $dropdown.getDefaultValueIndex().getValue() ?? 0/}
  default     = {$dropdown.getValuesList()[$defaultIndex]}
  {/if}
{elseif $field.getStringBox()}
  {let $box: $field.getStringBox()/}
  type        = string
  {if $box.getDefaultValue()}
  default     = "{$box.getDefaultValue()}"
  {/if}
{elseif $field.getEmailBox()}
  {let $box: $field.getEmailBox()/}
  type        = string
  {if $box.getDefaultValue()}
  default     = "{$box.getDefaultValue()}"
  {/if}
{elseif $field.getStringDropdown()}
  {let $dropdown: $field.getStringDropdown()/}
  type        = string
  {if $dropdown.getDefaultValueIndex()}
  {let $defaultIndex: $dropdown.getDefaultValueIndex().getValue() ?? 0/}
  default     = "{$dropdown.getValuesList()[$defaultIndex]}"
  {/if}
{elseif $field.getZoneDropdown()}
  {let $dropdown: $field.getZoneDropdown()/}
  type        = string
  {if $dropdown.getDefaultValue()}
  default     = "{$dropdown.getDefaultValue().getValue() ?? ''}"
  {/if}
{/if}
{rb}
{/template}

{template deployInputsReadme kind="text"}
{@param spec: DeployInputSpec}
{let $fields: listDeployInputFields($spec)/}
{for $field in $fields}
  {call deployInputReadme}{param field: $field/}{/call}
{/for}
{/template}

{template deployInputReadme kind="text"}
{@param field: DeployInputField}
{let $description kind="text"}
  {if $field.getDescription()}
    {$field.getDescription()}{nil}
  {elseif $field.getTooltip()}
    {$field.getTooltip()}{nil}
  {/if}
{/let}
{let $type kind="text"}
  {if $field.getBooleanCheckbox() or $field.getGroupedBooleanCheckbox()}
    bool{nil}
  {elseif $field.getIntegerBox() or $field.getIntegerDropdown()}
    number{nil}
  {else}
    string{nil}
  {/if}
{/let}
{let $defaultValue kind="text"}
  {if $field.getBooleanCheckbox()}
    {$field.getBooleanCheckbox().getDefaultValue()}{nil}
  {elseif $field.getGroupedBooleanCheckbox()}
    {$field.getGroupedBooleanCheckbox().getDefaultValue()}{nil}
  {elseif $field.getIntegerBox()}
    {let $box: $field.getIntegerBox()/}
    {if $box.getDefaultValue()}
      {$box.getDefaultValue().getValue() ?? 0}{nil}
    {/if}
  {elseif $field.getIntegerDropdown()}
    {let $dropdown: $field.getIntegerDropdown()/}
    {if $dropdown.getDefaultValueIndex()}
    {let $defaultIndex: $dropdown.getDefaultValueIndex().getValue() ?? 0/}
      {$dropdown.getValuesList()[$defaultIndex]}{nil}
    {/if}
  {elseif $field.getStringBox()}
    {let $box: $field.getStringBox()/}
    {if $box.getDefaultValue()}
      "{$box.getDefaultValue()}"{nil}
    {/if}
  {elseif $field.getEmailBox()}
    {let $box: $field.getEmailBox()/}
    {if $box.getDefaultValue()}
      "{$box.getDefaultValue()}"{nil}
    {/if}
  {elseif $field.getStringDropdown()}
    {let $dropdown: $field.getStringDropdown()/}
    {if $dropdown.getDefaultValueIndex()}
      {let $defaultIndex: $dropdown.getDefaultValueIndex().getValue() ?? 0/}
      {$dropdown.getValuesList()[$defaultIndex]}{nil}
    {/if}
  {elseif $field.getZoneDropdown()}
    {let $dropdown: $field.getZoneDropdown()/}
    {if $dropdown.getDefaultValue()}
      "{$dropdown.getDefaultValue().getValue() ?? ''}"{nil}
    {/if}
  {/if}
{/let}
| {$field.getName()} | {$description |markdowntable} | `{$type}` | `{$defaultValue ? $defaultValue : 'null'}` | {$defaultValue ? 'no' : 'yes'} |
{/template}

/**
 *  Produces metadata for a list of GceMetadataItems.
 *  Format: {key1} = {value1}
 *          {key2} = {value2}
 *  Ex: admin_email = foo@google.com
 */
{template gceMetadata kind="text"}
{@param specList: list<GceMetadataItem>}
{@param? deployInput: DeployInputSpec|null}
{for $metadata, $index in $specList}
{$metadata.getKey()} = {nil}

  {if $metadata.getValue()}
  "{$metadata.getValue() |doublequoted}"{nil}

  {elseif $metadata.getValueFromDeployInputField()}
  {let $field: findDeployInputField($metadata.getValueFromDeployInputField(), $deployInput)/}
  // Convert boolean "true" -> "True" for regression purposes
  {if $field.getBooleanCheckbox() or $field.getGroupedBooleanCheckbox()}
  title(var.{$field.getName()}){nil}
  {else}
  var.{$field.getName()}{nil}
  {/if}

  {/if /* $metadata.value */}

  {if $index != $specList.length - 1}
    {\n}
  {/if}
{/for}
{/template}

{template diskMetadata kind="text"}
{@param diskSpecs: list<DiskSpec>}
{if length($diskSpecs)}
{let $deviceNameArray: ['google_compute_disk.disk' + ($i + 1) + '.name' for $a, $i in $diskSpecs]/}
ATTACHED_DISKS = join(",", {$deviceNameArray}){nil}
{/if}
{/template}

{template startupScriptMetadata kind="text"}
{@param? startupSpec: GceStartupScriptSpec|null}
{if $startupSpec?.getBashScriptContent()}
startup-script = <<-EOT
#!/bin/bash
{$startupSpec?.getBashScriptContent()}
EOT{nil}
{/if}
{/template}

{template stackdriverMetadata kind="text"}
{@param? stackdriver: StackdriverSpec|null}
google-logging-enable = {nil}
{if $stackdriver?.getLogging()}
var.enable_cloud_logging ? "1" : "0"
{else}
"0"
{/if}
google-monitoring-enable = {nil}
{if $stackdriver?.getMonitoring()}
var.enable_cloud_monitoring ? "1" : "0"{nil}
{else}
"0"{nil}
{/if}
{/template}

{template stackdriverVariables kind="text"}
{@param? stackdriver: StackdriverSpec|null}
{if $stackdriver?.getLogging()}
{\n}
variable "enable_cloud_logging" {lb}
  description = "{constants.ENABLE_CLOUD_LOGGING_VAR_DESC}"
  type        = bool
  default     = {$stackdriver?.getLogging()!.getDefaultOn()}
{rb}
{/if}
{if $stackdriver?.getMonitoring()}
{\n}
variable "enable_cloud_monitoring" {lb}
  description = "{constants.ENABLE_CLOUD_MONITORING_VAR_DESC}"
  type        = bool
  default     = {$stackdriver?.getMonitoring()!.getDefaultOn()}
{rb}
{/if}
{/template}

{template stackdriverReadme kind="text"}
{@param? stackdriver: StackdriverSpec|null}
{if $stackdriver?.getLogging()}
| enable_cloud_logging | {constants.ENABLE_CLOUD_LOGGING_VAR_DESC} | `bool` | `{$stackdriver?.getLogging()!.getDefaultOn()}` | no |
{/if}
{if $stackdriver?.getMonitoring()}
enable_cloud_monitoring | {constants.ENABLE_CLOUD_MONITORING_VAR_DESC} | `bool` | `{$stackdriver?.getMonitoring()!.getDefaultOn()}` | no |
{/if}
{/template}

{template gcpAuthScopeVariables kind="text"}
{@param specs: list<GcpAuthScopeSpec>}
{@param? tier: VmTierSpec|null}
  {for $spec, $index in $specs}
    {\n}
    {call gcpAuthScopeVariable}
      {param spec: $spec /}
      {param tier: $tier /}
    {/call}
  {/for}
{/template}

{template gcpAuthScopeVariable kind="text"}
{@param spec: GcpAuthScopeSpec}
{@param? tier: VmTierSpec|null}
{let $name}
  {call util.gcpAuthScopePropertyName}
    {param scope: $spec.getScope() /}
  {/call}
{/let}
{let $description}
  {call util.authScopeDescription}
    {param scope: $spec.getScope() /}
  {/call}
{/let}
variable "{$name |tierprefixed: $tier}" {lb}
  description = "Allow {$description} on the VM"
  type        = bool
  default     = {not $spec!.getDefaultOff()}
{rb}
{/template}

{template gcpAuthScopesReadme kind="text"}
{@param specs: list<GcpAuthScopeSpec>}
  {for $spec, $index in $specs}
    {call gcpAuthScopeReadme}
      {param spec: $spec /}
    {/call}
  {/for}
{/template}

{template gcpAuthScopeReadme kind="text"}
{@param spec: GcpAuthScopeSpec}
{let $name}
  {call util.gcpAuthScopePropertyName}
    {param scope: $spec.getScope() /}
  {/call}
{/let}
{let $description}
  {call util.authScopeDescription}
    {param scope: $spec.getScope() /}
  {/call}
{/let}
| {$name} | {$description} | `string` | `{not $spec!.getDefaultOff()}` | no |
{/template}

{template passwordOutputsReadme kind="text"}
  {@param specList: list<PasswordSpec>}
  {@param? deployInput: DeployInputSpec|null}

  {for $spec, $index in $specList}
    {call passwordOutputReadme}
      {param password: $spec /}
      {param deployInput: $deployInput /}
    {/call}
  {/for}
{/template}

{template passwordOutputReadme kind="text"}
{@param password: PasswordSpec}
{@param? deployInput: DeployInputSpec|null}
{let $sanitizedPasswordLabel}
  {call util.sanitizePasswordLabel}
    {param spec: $password /}
  {/call}
{/let}
{let $passwordDescription}
  {call util.passwordOutputDescription}
    {param spec: $password /}
  {/call}
{/let}
{let $usernameDescription}
  {call util.usernameOutputDescription}
    {param spec: $password /}
  {/call}
{/let}

{if $password.getUsername()}
| {$sanitizedPasswordLabel}_user | {$usernameDescription} |
{elseif $password.getUsernameFromDeployInputField()}
{let $field: findDeployInputField($password.getUsernameFromDeployInputField(), $deployInput)/}
| {$sanitizedPasswordLabel}_user | {$usernameDescription |markdowntable} |
{/if}
| {$sanitizedPasswordLabel}_password | {$passwordDescription |markdowntable} |
{/template}

{template passwordOutputs kind="text"}
  {@param specList: list<PasswordSpec>}
  {@param? deployInput: DeployInputSpec|null}

  {for $spec, $index in $specList}
    {\n}
    {call passwordOutput}
      {param password: $spec /}
      {param deployInput: $deployInput /}
    {/call}
  {/for}
{/template}

{template passwordOutput kind="text"}
{@param password: PasswordSpec}
{@param? deployInput: DeployInputSpec|null}
{let $sanitizedPasswordLabel}
  {call util.sanitizePasswordLabel}
    {param spec: $password /}
  {/call}
{/let}
{let $passwordDescription}
  {call util.passwordOutputDescription}
    {param spec: $password /}
  {/call}
{/let}
{let $usernameDescription}
  {call util.usernameOutputDescription}
    {param spec: $password /}
  {/call}
{/let}

{if $password.getUsername()}
output "{$sanitizedPasswordLabel}_user" {lb}
  description = "{$usernameDescription |doublequoted}"
  value       = "{$password.getUsername()}"
{rb}
{\n}
{elseif $password.getUsernameFromDeployInputField()}
{let $field: findDeployInputField($password.getUsernameFromDeployInputField(), $deployInput)/}
output "{$sanitizedPasswordLabel}_user" {lb}
  description = "{$usernameDescription |doublequoted}"
  value       = var.{$field.getName()}
{rb}
{\n}
{/if}

output "{$sanitizedPasswordLabel}_password" {lb}
  description = "{$passwordDescription |doublequoted}"
  value       = random_password.{$sanitizedPasswordLabel}.result
  sensitive   = true
{rb}
{/template}

/**
 * Produces the serviceAccount block for a google_compute_instance.
 */
{template serviceAccount kind="text"}
{@param gcpAuthScopesList: list<GcpAuthScopeSpec>}
  service_account {lb}
    email = "default"
    scopes = compact([
      "https://www.googleapis.com/auth/cloud.useraccounts.readonly",
      "https://www.googleapis.com/auth/devstorage.read_only",
      "https://www.googleapis.com/auth/logging.write",
      "https://www.googleapis.com/auth/monitoring.write"
      {for $spec in $gcpAuthScopesList}
      {let $propertyName}
        {call util.gcpAuthScopePropertyName}
          {param scope: $spec.getScope() /}
        {/call}
      {/let}
      {let $url kind="text"}{call util.gcpAuthScopeUrl}{param spec: $spec/}{/call}{/let}
      ,var.{$propertyName} == true ? "{$url}" : null
      {/for}
    ])
  {rb}
{/template}


/**
 * Produces a variable for enabling/disabling IP Forwarding.
 */
{template ipForwardingVariable kind="text"}
{@param name: string}
{@param ipForwarding: IpForwardingSpec}
{@param? tier: VmTierSpec|null}
variable "{'ip_forward' |tierprefixed: $tier}" {lb}
  description = "{constants.IP_FORWARD_VAR_DESC}"
  type        = bool
  default     = {not $ipForwarding!.getDefaultOff()}
{rb}
{/template}

{template ipForwardingReadme kind="text"}
{@param name: string}
{@param ipForwarding: IpForwardingSpec}
| ip_forward | {constants.IP_FORWARD_VAR_DESC} | `bool` | `{not $ipForwarding!.getDefaultOff()}` | no |
{/template}