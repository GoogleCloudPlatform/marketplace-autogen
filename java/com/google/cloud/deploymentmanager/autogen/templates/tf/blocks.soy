/**
 * Contains Terraform blocks shared between single and multi-vm templates
 */
{namespace blocks}


import * as constants from 'com/google/cloud/deploymentmanager/autogen/templates/tf/constants.soy';
import * as util from 'com/google/cloud/deploymentmanager/autogen/templates/tf/util.soy';
import {AcceleratorSpec, ApplicationStatusSpec, DeployInputField, DeployInputSpec, DiskSpec, FirewallRuleSpec, GceMetadataItem, GceStartupScriptSpec, GcpAuthScopeSpec, ImageSpec, InstanceUrlSpec, IpForwardingSpec, LocalSsdSpec, MachineTypeSpec, NetworkInterfacesSpec, PasswordSpec, StackdriverSpec, VmTierSpec, ZoneSpec} from 'java/com/google/cloud/deploymentmanager/autogen/deployment_package_autogen_spec.proto';

/**
 * Produces a google_compute_firewall resource for each FirewallRuleSpec
 */
{template firewallResources kind="text"}
  {@param specList: list<FirewallRuleSpec>}

  {for $spec in $specList}
    {\n}
    {call firewallResource}
      {param spec: $spec /}
    {/call}
  {/for}
{/template}


/**
 * Produces a google_compute_firewall resource
 */
{template firewallResource kind="text"}
{@param spec: FirewallRuleSpec}
resource "google_compute_firewall" {call util.firewallRuleResourceName}{param spec: $spec/}{/call} {lb}
  count = var.{call util.firewallRuleVarName}{param spec: $spec/}{/call} ? 1 : 0
{\n}
  name = "${lb}var.goog_cm_deployment_name{rb}-{call util.firewallRuleNameSuffix}{param spec: $spec/}{/call}"
  network = element(var.networks, 0)
{\n}
  allow {lb}{if $spec.getPort().length > 0}
    ports = ["{$spec.getPort()}"]{/if}
    protocol = "{call util.firewallRuleProtocol}{param spec: $spec/}{/call}"
  {rb}
{\n}
  source_ranges =  compact([for range in split(",", var.{call util.firewallRuleSourceRangesVarName}{param spec: $spec /}{/call}) : trimspace(range)])
{rb}
{/template}



/**
 * Produces two terraform variables for each FirewallRuleSpec
 */
{template firewallVariables kind="text"}
  {@param specList: list<FirewallRuleSpec>}

  {for $spec in $specList}
    {\n}
    {call firewallVariable}
      {param spec: $spec /}
    {/call}
    {\n}
    {call firewallSourceRangesVariable}
      {param spec: $spec /}
    {/call}
  {/for}
{/template}


/**
 * Produces a boolean variable determining whether a firewall resource is created
 */
{template firewallVariable kind="text"}
{@param spec: FirewallRuleSpec}
variable "{call util.firewallRuleVarName}{param spec: $spec/}{/call}" {lb}
  description = "{call util.firewallVariableDescription}{param spec: $spec/}{/call}"
  type        = bool
  default     = {not $spec.getDefaultOff()}
{rb}
{/template}

/**
 * Produces a string variable detemining the source range of a firewall resource
 */
{template firewallSourceRangesVariable kind="text"}
{@param spec: FirewallRuleSpec}
variable "{call util.firewallRuleSourceRangesVarName}{param spec: $spec/}{/call}" {lb}
  description = "{call util.firewallSourceRangesVarDescription}{param spec: $spec/}{/call}"
  type        = string
  default     = ""
{rb}
{/template}

{template acceleratorVariables kind="text"}
{@param spec: AcceleratorSpec}
variable "accelerator_type" {lb}
  description = "{constants.ACCELERATOR_TYPE_VAR_DESC}"
  type        = string
  default     = "{$spec.getDefaultType()}"
{rb}
{\n}
variable "accelerator_count" {lb}
  description = "{constants.ACCELERATOR_COUNT_VAR_DESC}"
  type        = number
  default     = "{$spec.getDefaultCount() ?: 0}"
{rb}
{/template}

{template localSsds kind="text"}
  {@param localSsdSpec: LocalSsdSpec}
  {@param? deployInput: DeployInputSpec}
  {let $field: findDeployInputField($localSsdSpec.getCountFromDeployInputField(), $deployInput)/}
  {let $count: ($localSsdSpec.getCount() != 0) ? $localSsdSpec.getCount() : ($field.getIntegerBox()?.getDefaultValue()?.getValue() ?: 0)/}
  {for $i in range(0, $count)}
  scratch_disk {lb}
    interface = "SCSI"
  {rb}
  {\n}
  {/for}
{/template}

{template passwordResources kind="text"}
  {@param specList: list<PasswordSpec>}

  {for $spec, $index in $specList}
    {\n}
    {call passwordResource}
      {param spec: $spec /}
    {/call}
  {/for}
{/template}

{template passwordResource kind="text"}
{@param spec: PasswordSpec}
{let $sanitizedPasswordLabel}
  {call util.sanitizePasswordLabel}
    {param spec: $spec /}
  {/call}
{/let}
resource "random_password" "{$sanitizedPasswordLabel}" {lb}
  length = {$spec.getLength()}
  special = {$spec.getAllowSpecialChars()}
{rb}
{/template}

{template passwordMetadata kind="text"}
  {@param specList: list<PasswordSpec>}

  {for $spec, $index in $specList}
    {let $sanitizedPasswordLabel}
      {call util.sanitizePasswordLabel}
        {param spec: $spec /}
      {/call}
    {/let}

    {$spec.getMetadataKey()} = random_password.{$sanitizedPasswordLabel}.result{nil}
    {if $index != $specList.length - 1}
      {\n}
    {/if}
  {/for}
{/template}

{template deployInputVariables kind="text"}
{@param spec: DeployInputSpec}
{let $fields: listDeployInputFields($spec)/}
{for $field in $fields}
  {\n}
  {call deployInputVariable}{param field: $field/}{/call}
{/for}
{/template}

{template deployInputVariable kind="text"}
{@param field: DeployInputField}
variable "{$field.getName()}" {lb}
{if $field.getDescription()}
  description = "{$field.getDescription()}"
{elseif $field.getTooltip()}
  description = "{$field.getTooltip()}"
{/if}
{if $field.getBooleanCheckbox()}
  type        = bool
  default     = {$field.getBooleanCheckbox().getDefaultValue()}
{elseif $field.getGroupedBooleanCheckbox()}
  type        = bool
  default     = {$field.getGroupedBooleanCheckbox().getDefaultValue()}
{elseif $field.getIntegerBox()}
  {let $box: $field.getIntegerBox()/}
  type        = number
  {if $box.getDefaultValue()}
  default     = {$box.getDefaultValue().getValue() ?: 0}
  {/if}
{elseif $field.getIntegerDropdown()}
  {let $dropdown: $field.getIntegerDropdown()/}
  type        = number
  {if $dropdown.getDefaultValueIndex()}
  {let $defaultIndex: $dropdown.getDefaultValueIndex().getValue() ?: 0/}
  default     = {$dropdown.getValuesList()[$defaultIndex]}
  {/if}
{elseif $field.getStringBox()}
  {let $box: $field.getStringBox()/}
  type        = string
  {if $box.getDefaultValue()}
  default     = "{$box.getDefaultValue()}"
  {/if}
{elseif $field.getEmailBox()}
  {let $box: $field.getEmailBox()/}
  type        = string
  {if $box.getDefaultValue()}
  default     = "{$box.getDefaultValue()}"
  {/if}
{elseif $field.getStringDropdown()}
  {let $dropdown: $field.getStringDropdown()/}
  type        = string
  {if $dropdown.getDefaultValueIndex()}
  {let $defaultIndex: $dropdown.getDefaultValueIndex().getValue() ?: 0/}
  default     = "{$dropdown.getValuesList()[$defaultIndex]}"
  {/if}
{elseif $field.getZoneDropdown()}
  {let $dropdown: $field.getZoneDropdown()/}
  type        = string
  {if $dropdown.getDefaultValue()}
  default     = "{$dropdown.getDefaultValue().getValue() ?: ''}"
  {/if}
{/if}
{rb}
{/template}

/**
 *  Produces metadata for a list of GceMetadataItems.
 *  Format: {key1} = {value1}
 *          {key2} = {value2}
 *  Ex: admin_email = foo@google.com
 */
{template gceMetadata kind="text"}
{@param specList: list<GceMetadataItem>}
{@param? deployInput: DeployInputSpec}
{for $metadata, $index in $specList}
{$metadata.getKey()} = {nil}

  {if $metadata.getValue()}
  "{$metadata.getValue()}"{nil}

  {elseif $metadata.getValueFromDeployInputField()}
  {let $field: findDeployInputField($metadata.getValueFromDeployInputField(), $deployInput)/}
  var.{$field.getName()}{nil}

  {/if /* $metadata.value */}

  {if $index != $specList.length - 1}
    {\n}
  {/if}
{/for}
{/template}

{template passwordOutputs kind="text"}
  {@param specList: list<PasswordSpec>}
  {@param? deployInput: DeployInputSpec}

  {for $spec, $index in $specList}
    {\n}
    {call passwordOutput}
      {param password: $spec /}
      {param deployInput: $deployInput /}
    {/call}
  {/for}
{/template}

{template passwordOutput kind="text"}
{@param password: PasswordSpec}
{@param? deployInput: DeployInputSpec}
{let $sanitizedPasswordLabel}
  {call util.sanitizePasswordLabel}
    {param spec: $password /}
  {/call}
{/let}
{let $passwordDescription}
  {call util.passwordOutputDescription}
    {param spec: $password /}
  {/call}
{/let}
{let $usernameDescription}
  {call util.usernameOutputDescription}
    {param spec: $password /}
  {/call}
{/let}

{if $password.getUsername()}
output "{$sanitizedPasswordLabel}_user" {lb}
  description = "{$usernameDescription}"
  value       = "{$password.getUsername()}"
{rb}
{\n}
{elseif $password.getUsernameFromDeployInputField()}
{let $field: findDeployInputField($password.getUsernameFromDeployInputField(), $deployInput)/}
output "{$sanitizedPasswordLabel}_user" {lb}
  description = "{$usernameDescription}"
  value       = var.{$field.getName()}
{rb}
{\n}
{/if}

output "{$sanitizedPasswordLabel}_password" {lb}
  description = "{$passwordDescription}"
  value       = random_password.{$sanitizedPasswordLabel}.result
  sensitive   = true
{rb}
{/template}
