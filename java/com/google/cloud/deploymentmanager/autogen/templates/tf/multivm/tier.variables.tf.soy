{namespace vm.multi.tier.variables}

import * as blocks from 'com/google/cloud/deploymentmanager/autogen/templates/tf/blocks.soy';
import * as constants from 'com/google/cloud/deploymentmanager/autogen/templates/tf/constants.soy';
import * as util from 'com/google/cloud/deploymentmanager/autogen/templates/tf/util.soy';
import {MultiVmDeploymentPackageSpec, VmTierSpec} from 'java/com/google/cloud/deploymentmanager/autogen/deployment_package_autogen_spec.proto';

{template main kind="text"}
{@param packageSpec: MultiVmDeploymentPackageSpec}
{@param spec: VmTierSpec}
variable "deployment_name" {lb}
  type        = string
  description = "{constants.DEPLOYMENT_NAME_VAR_DESC}"
{rb}
{\n}
variable "zone" {lb}
  description = "{constants.ZONE_VAR_DESC}"
  type        = string
  {if $packageSpec.getZone()?.getDefaultZone()}
  default     = "{$packageSpec.getZone().getDefaultZone()}"
  {/if}
{rb}
{\n}
variable "instance_count" {lb}
  type        = number
{rb}
{\n}
variable "source_image" {lb}
  description = "{constants.SOURCE_IMAGE_VAR_DESC}"
  type        = string
  default     = "{call util.imageUri}{param spec: $spec.getImagesList()[0]/}{/call}"
{rb}
{\n}
variable "machine_type" {lb}
  description = "{constants.MACHINE_TYPE_VAR_DESC}"
  type        = string
  default     = "{$spec.getMachineType()!.getDefaultMachineType()!.getGceMachineType()}"
{rb}
{\n}
variable "boot_disk_type" {lb}
  description = "{constants.BOOT_DISK_TYPE_VAR_DESC}"
  type        = string
  default     = "{$spec.getBootDisk()!.getDiskType()!.getDefaultType()}"
{rb}
{\n}
variable "boot_disk_size" {lb}
  description = "{constants.BOOT_DISK_SIZE_VAR_DESC}"
  type        = number
  default     = {$spec.getBootDisk()!.getDiskSize()!.getDefaultSizeGb()}
{rb}
{\n}
{if $spec.getAdditionalDisksList()}
  {call blocks.additionalDiskVariables}
    {param diskSpecs: $spec.getAdditionalDisksList() /}
    {param deployInput: $packageSpec.getDeployInput() /}
  {/call}
{/if}
variable "networks" {lb}
  description = "{constants.NETWORKS_VAR_DESC}"
  type        = list(string)
  default     = ["default"]
{rb}
{\n}
variable "sub_networks" {lb}
  description = "{constants.SUB_NETWORKS_VAR_DESC}"
  type        = list(string)
  default     = []
{rb}
{\n}

{call blocks.externalIpVariable}
  {param spec: $spec.getNetworkInterfaces()!.getExternalIp()! /}
{/call}

{if $spec.getIpForwarding()}
{\n}
  {call blocks.ipForwardingVariable}
    {param name: "ip_forward" /}
    {param ipForwarding: $spec.getIpForwarding() /}
  {/call}
{/if}

{call blocks.firewallVariables}
  {param specList: $spec.getFirewallRulesList()/}
{/call}

{if length($spec.getAcceleratorsList()) > 0}
{\n}
  {call blocks.acceleratorVariables}
    {param spec: $spec.getAcceleratorsList()[0]/}
  {/call}
{/if}

{for $password in $packageSpec.getPasswordsList()}
  {let $sanitizedPasswordLabel}
    {call util.sanitizePasswordLabel}
      {param spec: $password /}
    {/call}
  {/let}
{let $passwordDescription}
  {call util.passwordOutputDescription}
    {param spec: $password /}
  {/call}
{/let}
{\n}
variable "{$sanitizedPasswordLabel}_password" {lb}
  type        = string
  description = "{$passwordDescription |doublequoted}"
  sensitive   = true
{rb}
{/for}

{if $packageSpec.getDeployInput()}
  {call blocks.deployInputVariables}
    {param spec: $packageSpec.getDeployInput() /}
    {param tier: $spec /}
  {/call}
{/if}

{for $depTier in dependentTiers($spec, $packageSpec)}
{\n}
variable "{'instance_count' |tierprefixed: $depTier}" {lb}
  type        = number
{rb}
{/for}

{call blocks.stackdriverVariables}{param stackdriver: $packageSpec.getStackdriver() /}{/call}

{call blocks.gcpAuthScopeVariables}{param specs: $spec.getGcpAuthScopesList() /}{/call}
{/template}
