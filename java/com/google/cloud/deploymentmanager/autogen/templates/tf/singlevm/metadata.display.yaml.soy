{namespace vm.single.metadata.display}

import * as blocks from 'com/google/cloud/deploymentmanager/autogen/templates/tf/metadata_display_blocks.soy';
import {SingleVmDeploymentPackageSpec} from 'java/com/google/cloud/deploymentmanager/autogen/deployment_package_autogen_spec.proto';
import {SolutionMarketingInfo} from 'java/com/google/cloud/deploymentmanager/autogen/marketing_info.proto';

{template main kind="text"}
{@param spec: SingleVmDeploymentPackageSpec}
{@param solutionId: string}
{@param? solutionInfo: SolutionMarketingInfo|null}
{@param? templateVersion: string|null}

apiVersion: blueprints.cloud.google.com/v1alpha1
kind: BlueprintMetadata
metadata:
  name: marketplace-tools-display
  annotations:
    autogenSpecType: SINGLE_VM
    config.kubernetes.io/local-config: "true"
spec:
  info:
    title: Google Cloud Marketplace Terraform Module
    source: {lb}{rb}
  ui:
    input:
      variables:
        {let $projectIdDisplay kind="text"}
          {call blocks.projectIdPropertyDisplay}
          {/call}
        {/let}
        {$projectIdDisplay |indent: 8, true}{nil}

        {let $deploymentNameDisplay kind="text"}
          {call blocks.deploymentNamePropertyDisplay}
          {/call}
        {/let}
        {$deploymentNameDisplay |indent: 8, true}{nil}

        {let $imageDisplay kind="text"}
          {call blocks.imagePropertyDisplay}
            {param name: 'source_image' /}
            {param imagesList: $spec.getImagesList() /}
          {/call}
        {/let}
        {$imageDisplay |indent: 8, true}{nil}

        {let $machineTypeDisplay kind="text"}
          {call blocks.machineTypePropertyDisplay}
            {param name: 'machine_type' /}
            {param spec: $spec.getMachineType()! /}
            {param zonePropertyName: 'zone' /}
          {/call}
        {/let}
        {$machineTypeDisplay |indent: 8, true}{nil}

        {if solutionHasGpus($spec)}
        {let $acceleratorDisplay kind="text"}
          {call blocks.acceleratorPropertiesDisplay}
            {param namePrefix: 'accelerator' /}
            {param spec: $spec.getAcceleratorsList()[0] /}
          {/call}
        {/let}
        {$acceleratorDisplay |indent: 8, true}{nil}
        {/if}

        {let $bootDiskDisplay kind="text"}
          {call blocks.bootDiskPropertiesDisplay}
            {param spec: $spec.getBootDisk()! /}
            {param zonePropertyName: 'zone' /}
          {/call}
        {/let}
        {$bootDiskDisplay |indent: 8, true}{nil}

        {let $zoneDisplay kind="text"}
          {call blocks.zonePropertyDisplay}
            {param name: 'zone'/}
            {param solutionHasGpus: solutionHasGpus($spec) /}
            {param zoneSpec: $spec.getZone() /}
          {/call}
        {/let}
        {$zoneDisplay |indent: 8, true}{nil}

        {let $networkDisplay kind="text"}
          {call blocks.networkPropertiesDisplay}
            {param nameSuffix: 'networks' /}
            {param zonePropertyName: 'zone' /}
            {param spec: $spec.getNetworkInterfaces()! /}
          {/call}
        {/let}
        {$networkDisplay |indent: 8, true}{nil}

        {for $firewallRule in $spec.getFirewallRulesList()}
        {let $firewallDisplay kind="text"}
          {call blocks.firewallPropertiesDisplay}
            {param spec: $firewallRule /}
          {/call}
        {/let}
        {$firewallDisplay |indent: 8, true}{nil}
        {/for}

        {if $spec.getIpForwarding()}
        {let $ipForwardingDisplay kind="text"}
          {call blocks.ipForwardingPropertyDisplay}
            {param name: 'ip_forward' /}
            {param spec: $spec.getIpForwarding() /}
          {/call}
        {/let}
        {$ipForwardingDisplay |indent: 8, true}{nil}
        {/if}

        {if $spec.getAdditionalDisksList()}
        {let $additionalDisksDisplay kind="text"}
          {call blocks.additionalDisksPropertiesDisplay}
            {param diskSpecs: $spec.getAdditionalDisksList() /}
            {param zonePropertyName: 'zone' /}
          {/call}
        {/let}
        {$additionalDisksDisplay |indent: 8, true}{nil}
        {/if}

        {if $spec.getDeployInput()}
        {let $deployInputDisplay kind="text"}
          {call blocks.deployInputPropertiesDisplay}
            {param spec: $spec.getDeployInput() /}
          {/call}
        {/let}
        {$deployInputDisplay |indent: 8, true}{nil}
        {/if}

        {if $spec.getStackdriver()}
        {let $stackdriverDisplay kind="text"}
          {call blocks.stackdriverPropertyDisplay}
            {param stackdriver: $spec.getStackdriver()/}
          {/call}
        {/let}
        {$stackdriverDisplay |indent: 8, true}{nil}
        {/if}

      sections:
      {let $deploymentInputTopSections kind="text"}
        {call blocks.topSections}
          {param spec: $spec.getDeployInput()/}
        {/call}
      {/let}
      {$deploymentInputTopSections |indent: 8, true}{nil}
        - name: boot_disk
          title: Boot Disk
          tooltip: Each instance requires a disk to boot from.
      {if length($spec.getAdditionalDisksList()) == 1}
        - name: additional_disks
          title: Additional Disk
          tooltip: The additional disk will be attached to the instance.
      {/if}
      {if length($spec.getAdditionalDisksList()) > 1}
        - name: additional_disks
          title: Additional Disks
          tooltip: The additional disks will be attached to the instance.
      {/if}
        - name: networking
          title: Networking
      {let $deploymentInputBottomSections kind="text"}
        {call blocks.bottomSections}
          {param spec: $spec.getDeployInput()/}
        {/call}
      {/let}
      {$deploymentInputBottomSections |indent: 8, true}{nil}
      {if $spec.getStackdriver()}
      {let $stackdriverBottomSections kind="text"}
        {call blocks.stackdriverBottomSections}
          {param stackdriver: $spec.getStackdriver()/}
        {/call}
      {/let}
      {$stackdriverBottomSections |indent: 8, true}{nil}
      {/if}
    {let $actionItems: $spec.getPostDeploy()?.getActionItemsList() ?? [] /}
    {if $actionItems.length > 0}
    runtime:
      suggestedActions:
      {for $action in $actionItems}
        - heading: {$action.getHeading() |yamlprimitive: 10}
        {if $action.getDescription()}
          description: {$action.getDescription() |yamlprimitive: 10}
        {/if}
        {if $action.getSnippet()}
          snippet: {$action.getSnippet() |yamlprimitive: 10}
        {/if}
        // TODO(b/309686695): Include "showIf" once template expressions are supported for TF
      {/for}
    {/if}
{/template}
