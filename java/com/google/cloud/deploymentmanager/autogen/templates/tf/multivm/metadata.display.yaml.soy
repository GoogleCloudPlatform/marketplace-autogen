{namespace vm.multi.metadata.display}

import * as blocks from 'com/google/cloud/deploymentmanager/autogen/templates/tf/metadata_display_blocks.soy';
import {MultiVmDeploymentPackageSpec, VmTierSpec} from 'java/com/google/cloud/deploymentmanager/autogen/deployment_package_autogen_spec.proto';
import {SolutionMarketingInfo} from 'java/com/google/cloud/deploymentmanager/autogen/marketing_info.proto';

{template main kind="text"}
{@param spec: MultiVmDeploymentPackageSpec}
apiVersion: blueprints.cloud.google.com/v1alpha1
kind: BlueprintMetadata
metadata:
  name: marketplace-tools-display
  annotations:
    autogenSpecType: MULTI_VM
    config.kubernetes.io/local-config: "true"
spec:
  ui:
    input:
      variables:
        {let $projectIdDisplay kind="text"}
          {call blocks.projectIdPropertyDisplay/}
        {/let}
        {$projectIdDisplay |indent: 8, true}{nil}

        {let $deploymentNameDisplay kind="text"}
          {call blocks.deploymentNamePropertyDisplay}
          {/call}
        {/let}
        {$deploymentNameDisplay |indent: 8, true}{nil}

        {let $zoneDisplay kind="text"}
          {call blocks.zonePropertyDisplay}
            {param name: 'zone'/}
            {param solutionHasGpus: solutionHasGpus($spec) /}
            {param zoneSpec: $spec.getZone() /}
          {/call}
        {/let}
        {$zoneDisplay |indent: 8, true}{nil}

        {if $spec.getDeployInput()}
        {let $deployInputDisplay kind="text"}
          {call blocks.deployInputPropertiesDisplay}
            {param spec: $spec.getDeployInput() /}
          {/call}
        {/let}
        {$deployInputDisplay |indent: 8, true}{nil}
        {/if}

        {if $spec.getStackdriver()}
        {let $stackdriverDisplay kind="text"}
          {call blocks.stackdriverPropertyDisplay}
            {param stackdriver: $spec.getStackdriver()/}
          {/call}
        {/let}
        {$stackdriverDisplay |indent: 8, true}{nil}
        {/if}

        {for $tier in $spec.getTiersList()}
        {let $tierVariablesDisplay kind="text"}
          {call tierVariables}
            {param tier: $tier/}
          {/call}
        {/let}
        {$tierVariablesDisplay |indent: 8, true}{nil}
        {/for}
      sections:
      {let $deploymentInputTopSections kind="text"}
        {call blocks.topSections}
          {param spec: $spec.getDeployInput()/}
        {/call}
      {/let}
      {$deploymentInputTopSections |indent: 8, true}{nil}
      {for $tier in $spec.getTiersList()}
        - name: {call tierSectionName}{param tier: $tier/}{/call}
          title: {$tier.getTitle() |yamlprimitive: 6}
      {/for}
      {let $deploymentInputBottomSections kind="text"}
        {call blocks.bottomSections}
          {param spec: $spec.getDeployInput()/}
        {/call}
      {/let}
      {$deploymentInputBottomSections |indent: 8, true}{nil}
      {if $spec.getStackdriver()}
      {let $stackdriverBottomSections kind="text"}
        {call blocks.stackdriverBottomSections}
          {param stackdriver: $spec.getStackdriver()/}
        {/call}
      {/let}
      {$stackdriverBottomSections |indent: 8, true}{nil}
      {/if}
    {let $actionItems: $spec.getPostDeploy()?.getActionItemsList() ?? [] /}
    {if $actionItems.length > 0}
    runtime:
      suggestedActions:
      {for $action in $actionItems}
        - heading: {$action.getHeading() |yamlprimitive: 10}
        {if $action.getDescription()}
          description: {$action.getDescription() |yamlprimitive: 10}
        {/if}
        {if $action.getSnippet()}
          snippet: {$action.getSnippet() |yamlprimitive: 10}
        {/if}
        // TODO(b/309686695): Include "showIf" once template expressions are supported for TF
      {/for}
    {/if}
{/template}

{template tierVariables kind="text" visibility="private"}
{@param tier: VmTierSpec}

{let $instanceCount: $tier.getInstanceCount()!/}
{'instance_count' |tierprefixed: $tier}:
  name: {'instance_count' |tierprefixed: $tier}
  title: Instance Count
  {if $instanceCount.getTooltip()}
  tooltip: {$instanceCount.getTooltip() |yamlprimitive: 2}
  {/if}
  {if $instanceCount.getDescription()}
  subtext: {$instanceCount.getDescription() |yamlprimitive: 2}
  {/if}
  section: {call tierSectionName}{param tier: $tier/}{/call}
  {if $instanceCount.getRange()}
  min: {$instanceCount.getRange().getStartValue()}
  max: {$instanceCount.getRange().getEndValue()}
  {elseif $instanceCount.getList()}
  enumValueLabels:
    {for $value in $instanceCount.getList().getValuesList()}
    - label: "{$value}"
      value: "{$value}"
    {/for}
  {/if}

{call blocks.imagePropertyDisplay}
  {param name: 'source_image' /}
  {param imagesList: $tier.getImagesList() /}
  {param tier: $tier /}
{/call}

{call blocks.machineTypePropertyDisplay}
  {param name: 'machine_type' /}
  {param spec: $tier.getMachineType()! /}
  {param zonePropertyName: 'zone' /}
  {param tier: $tier /}
{/call}

{if length($tier.getAcceleratorsList()) > 0}
{call blocks.acceleratorPropertiesDisplay}
  {param namePrefix: 'accelerator' /}
  {param spec: $tier.getAcceleratorsList()[0] /}
  {param tier: $tier /}
{/call}
{/if}

{call blocks.bootDiskPropertiesDisplay}
  {param spec: $tier.getBootDisk()! /}
  {param zonePropertyName: 'zone' /}
  {param tier: $tier /}
{/call}

{call blocks.networkPropertiesDisplay}
  {param nameSuffix: 'networks' /}
  {param zonePropertyName: 'zone' /}
  {param spec: $tier.getNetworkInterfaces()! /}
  {param tier: $tier /}
{/call}

{for $firewallRule in $tier.getFirewallRulesList()}
{call blocks.firewallPropertiesDisplay}
  {param spec: $firewallRule /}
  {param tier: $tier /}
{/call}
{/for}

{if $tier.getIpForwarding()}
  {call blocks.ipForwardingPropertyDisplay}
    {param name: 'ip_forward' /}
    {param spec: $tier.getIpForwarding() /}
    {param tier: $tier /}
  {/call}
{/if}

{for $gcpAuthScopeSpec in $tier.getGcpAuthScopesList()}
{call blocks.gcpAuthScopesPropertyDisplay}
  {param scope: $gcpAuthScopeSpec.getScope() /}
  {param tier: $tier /}
{/call}
{/for}
{/template}

{template tierSectionName kind="text" visibility="private"}
{@param tier: VmTierSpec}
{$tier.getName() + '_tier' |lowercased}{nil}
{/template}