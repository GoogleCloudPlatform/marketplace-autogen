{namespace vm.single}
{alias cloud.deploymentmanager.autogen as proto}

/** Generates top level template solution.jinja file. */
{template .jinja kind="text"}
{@param spec: cloud.deploymentmanager.autogen.SingleVmDeploymentPackageSpec}

{let $waiterSpec:
    $spec.applicationStatus?.type == proto.ApplicationStatusSpec.StatusType.WAITER
    ? $spec.applicationStatus.waiter : null/}
{let $enableLegacyStatus:
    $spec.applicationStatus?.type == proto.ApplicationStatusSpec.StatusType.LEGACY_DETECTOR/}

{% import "path_utils.jinja" as path_utils with context %}
{\n}
{% set project = env["project"] %}
{% set deployment = env["deployment"] %}
{% set name = "%s-vm-tmpl" % env["name"] %}
{% set instanceName = "%s-vm" % deployment %}
{% set zone = properties["zone"] %}
{% set machineType = properties["machineType"] %}
{if length($spec.acceleratorsList) > 0}
{% set acceleratorType = properties["acceleratorType"] %}
{% set acceleratorCount = properties["acceleratorCount"] %}
{/if}

{% set networks = [] %}
{% for network in properties["network"] %}
{% set _ = networks.append(path_utils.networkPath(network)) %}
{% endfor %}

{% set subnetworks = properties["subnetwork"] %}

{% set externalIPs = properties["externalIP"] %}

{% set bootDiskType = properties["bootDiskType"] %}
{% set bootDiskSizeGb = properties["bootDiskSizeGb"] %}

{% set hasExternalIP = externalIPs and externalIPs[0] != "{externalIpTypeName(proto.ExternalIpSpec.Type.NONE)}" %}

{# Software status only works if the VM has an external IP. #}
{% set enableStatusWaiter = hasExternalIP %}

{if $spec.ipForwarding}
{% set canIpForward = properties["ipForward"] == "On" %}
{/if}

{if $spec.stackdriver}
{call renders.stackdriverPropertiesJinja}
  {param stackdriver: $spec.stackdriver/}
{/call}
{/if}

{for $scope in $spec.gcpAuthScopesList}
{let $propName kind="text"}{call utilities.gcpAuthScopePropertyName}{param spec: $scope/}{/call}{/let}
{% set {$propName} = properties["{$propName}"] %}
{/for}

{if length($spec.imagesList) > 1}
{\n}
{% set imageProjects = [{nil}
{for $image in $spec.imagesList}
"{$image.project}"{if not isLast($image)}, {/if}{nil}
{/for}
] %}
{% set imageNames = [{nil}
{for $image in $spec.imagesList}
"{$image.name}"{if not isLast($image)}, {/if}{nil}
{/for}
] %}
{% set selectedImageIndex = properties["image"]|int %}
{/if}

{\n}
resources:
  - name: {{ name }}
    type: vm_instance.py
    properties:
      {let $instanceName kind="text"}
        {{ instanceName }}{nil}
      {/let}
      instanceName: {$instanceName}
      {if length($spec.imagesList) > 1}
      sourceImage: https://www.googleapis.com/compute/v1/projects/{{ imageProjects[selectedImageIndex] }}/global/images/{{ imageNames[selectedImageIndex] }}
      {else}
      sourceImage: https://www.googleapis.com/compute/v1/projects/{$spec.imagesList[0].project}/global/images/{$spec.imagesList[0].name}
      {/if}
      zone: {{ zone }}
      machineType: {{ machineType }}
      networks:
      {% for network in networks %}
        - {{ network }}
      {% endfor %}
      {% if subnetworks is defined and subnetworks %}
      subnetworks:
      {% for subnetwork in subnetworks %}
        - {{ subnetwork or '' }}
      {% endfor %}
      {% endif %}
      {% if externalIPs is defined and externalIPs %}
      externalIPs:
      {% for externalIP in externalIPs %}
        - {{ externalIP }}
      {% endfor %}
      {% endif %}
      bootDiskType: {{ bootDiskType }}
      bootDiskSizeGb: {{ bootDiskSizeGb }}
      {if length($spec.additionalDisksList) > 0}
      disks:
        {let $additionalDisksSection kind="text"}
          {call renders.additionalDiskSection}
            {param additionalDisksList: $spec.additionalDisksList/}
            {param deployInputSpec: $spec.deployInput/}
            {param instanceName: $instanceName/}
          {/call}
        {/let}
        {$additionalDisksSection |indent: 8, true}{nil}
      {/if}
      {if $spec.localSsds}
      {let $localSsdItem kind="text"}
        {call renders.localSsdPropertyItem}
          {param localSsdSpec: $spec.localSsds/}
          {param deployInput: $spec.deployInput/}
        {/call}
      {/let}
      {$localSsdItem |indent: 6}
      {/if}

      {if $spec.ipForwarding}
      canIpForward: {{ canIpForward }}
      {/if}

      {if length($spec.acceleratorsList) > 0}
      {% if acceleratorCount > 0 %}
      guestAccelerators:
        - acceleratorType: {{ acceleratorType }}
          acceleratorCount: {{ acceleratorCount }}
      {% endif %}
      {/if}

      {let $serviceAccounts kind="text"}
        {call renders.serviceAccountsSection}
          {param gcpAuthScopesList: $spec.gcpAuthScopesList/}
          {param waiterSpec: $waiterSpec/}
        {/call}
      {/let}
      {$serviceAccounts |indent: 6, true}{nil}

      //TODO(khajduczenia) Extract metadata items to renders template.
      {let $passwordMetadataItems kind="text"}
        {call .passwordMetadataItems}{param spec: $spec/}{/call}
      {/let}
      {let $startupScriptAndWaiterMetadataItemsUnconditional kind="text"}
        {call renders.startupScriptAndWaiterMetadataItemsUnconditional}
          {param waiterSpec: $waiterSpec/}
          {param startupSpec: $spec.gceStartupScript/}
        {/call}
      {/let}
      {let $startupScriptAndWaiterMetadataItemsStatusWaiterEnabled kind="text"}
        {call renders.startupScriptAndWaiterMetadataItemsConditional}
          {param waiterSpec: $waiterSpec/}
          {param startupSpec: $spec.gceStartupScript/}
          {param statusWaiterEnabled: true/}
        {/call}
      {/let}
      {let $startupScriptAndWaiterMetadataItemsStatusWaiterDisabled kind="text"}
        {call renders.startupScriptAndWaiterMetadataItemsConditional}
          {param waiterSpec: $waiterSpec/}
          {param startupSpec: $spec.gceStartupScript/}
          {param statusWaiterEnabled: false/}
        {/call}
      {/let}
      {let $startupScriptAndWaiterMetadataItemsConditional kind="text"}
        {call renders.jinjaConditionalContent}
          {param enabledContent: $startupScriptAndWaiterMetadataItemsStatusWaiterEnabled/}
          {param disabledContent: $startupScriptAndWaiterMetadataItemsStatusWaiterDisabled/}
          {param jinjaConditionalVariableName: 'enableStatusWaiter'/}
        {/call}
      {/let}
      {let $gceMetadataItems kind="text"}
        {call renders.gceMetadataItems}
          {param specList: $spec.gceMetadataItemsList/}
          {param deployInput: $spec.deployInput/}
        {/call}
      {/let}
      {let $stackdriverMetadataItems kind="text"}
        {call renders.stackdriverMetadataItems}
          {param stackdriver: $spec.stackdriver/}
        {/call}
      {/let}

      // Waiter's metadata are rendered conditionally - with other metadata items list empty,
      // the metadata attribute should be rendered conditionally too. b/69837703.
      {if strLen($passwordMetadataItems)
          + strLen($gceMetadataItems)
          + strLen($startupScriptAndWaiterMetadataItemsUnconditional)
          + strLen($stackdriverMetadataItems) > 0}
      metadata:
        items:
          {$passwordMetadataItems |indent: 10, true}{nil}
          {$startupScriptAndWaiterMetadataItemsUnconditional |indent: 10, true}{nil}
          {$startupScriptAndWaiterMetadataItemsConditional |indent: 10, true}{nil}
          {$gceMetadataItems |indent: 10, true}{nil}
          {$stackdriverMetadataItems |indent: 10, true}{nil}
      {elseif strLen($startupScriptAndWaiterMetadataItemsStatusWaiterDisabled) == 0
              and strLen($startupScriptAndWaiterMetadataItemsStatusWaiterEnabled) > 0}
      {% if enableStatusWaiter %}
      metadata:
        items:
          {$startupScriptAndWaiterMetadataItemsStatusWaiterEnabled |indent: 10, true}{nil}
      {% endif %}
      {elseif strLen($startupScriptAndWaiterMetadataItemsStatusWaiterEnabled) == 0
              and strLen($startupScriptAndWaiterMetadataItemsStatusWaiterDisabled) > 0}
      {% if not enableStatusWaiter %}
      metadata:
        items:
          {$startupScriptAndWaiterMetadataItemsStatusWaiterDisabled |indent: 10, true}{nil}
      {% endif %}
      {elseif strLen($startupScriptAndWaiterMetadataItemsStatusWaiterEnabled) > 0
              and strLen($startupScriptAndWaiterMetadataItemsStatusWaiterDisabled) > 0}
      metadata:
        items:
          {% if enableStatusWaiter %}
          {$startupScriptAndWaiterMetadataItemsStatusWaiterEnabled |indent: 10, true}{nil}
          {% else %}
          {$startupScriptAndWaiterMetadataItemsStatusWaiterDisabled |indent: 10, true}{nil}
          {% endif %}
      {/if}

      tags:
        items:
          - {call utilities.deploymentTag data="all"/}

  {for $password in $spec.passwordsList}
  {let $passwordResource kind="text"}
    {call renders.passwordResource}
      {param password: $password/}
      {param passwordIndex: index($password)/}
    {/call}
  {/let}
  {$passwordResource |indent: 2, true}{nil}
  {/for}

  {let $waiterResources kind="text"}
    {call renders.startupScriptAndWaiterResources}
      {param waiterSpec: $waiterSpec/}
      {param startupSpec: $spec.gceStartupScript/}
      {param enableJinjaVarName: 'enableStatusWaiter'/}
      {param dependsOnList: ['{{ instanceName }}']/}
    {/call}
  {/let}
  {$waiterResources |indent: 2, true}{nil}

  {let $firewallResources kind="text"}
    {call renders.firewallResources}{param specList: $spec.firewallRulesList/}{/call}
  {/let}
  {if strLen($firewallResources) > 0}
  {$firewallResources |indent: 2, true}{nil}
  {/if}

{\n}
outputs:
  - name: deployment
    value: {{ deployment }}
  {for $password in $spec.passwordsList}
  {let $passwordOutput kind="text"}
    {call renders.passwordOutput}
      {param password: $password/}
      {param passwordIndex: index($password)/}
    {/call}
  {/let}
  {$passwordOutput |indent: 2, true}{nil}
  {/for}
  - name: project
    value: {{ project }}
  - name: vmId
    value: $(ref.{{ instanceName }}.id)
  - name: vmExternalIP
    {% if hasExternalIP %}
    value: $(ref.{{ name }}.ip)
    {% else %}
    value: NONE
    {% endif %}
  - name: vmInternalIP
    value: $(ref.{{ name }}.internalIP)
  - name: vmName
    value: {{ instanceName }}
  - name: vmSelfLink
    value: $(ref.{{ instanceName }}.selfLink)
  - name: hasExternalIP
    value: {{ hasExternalIP }}
  - name: mainNetwork
    value: {{ networks[0] }}
  {if $enableLegacyStatus}
  - name: x-status-type
    value: console
  - name: x-status-instance
    value: {{ instanceName }}
  {/if}

{/template}


{template .passwordMetadataItems kind="text" /* visibility="private" */}
{@param spec: cloud.deploymentmanager.autogen.SingleVmDeploymentPackageSpec}
{for $password in $spec.passwordsList}
{let $passwordMetadata kind="text"}
  {call renders.passwordMetadataFromOutput}
    {param password: $password/}
    {param passwordIndex: index($password)/}
  {/call}
{/let}
{$passwordMetadata |indent: 0, true}{nil}
{/for}
{/template}
