{namespace vm.single}
{alias cloud.deploymentmanager.autogen as proto}

/** Generates solution.jinja.schema file. */
{template .schema kind="text"}
{@param solutionId: string}
{@param spec: cloud.deploymentmanager.autogen.SingleVmDeploymentPackageSpec}
{@param? solutionInfo: cloud.deploymentmanager.autogen.SolutionMarketingInfo}
{@param? templateVersion: string}

{let $waiterSpec:
    ($spec.applicationStatus?.type == proto.ApplicationStatusSpec.StatusType.WAITER)
    ? $spec.applicationStatus.waiter : null/}
{let $enableLegacyStatus:
    $spec.applicationStatus?.type == proto.ApplicationStatusSpec.StatusType.LEGACY_DETECTOR/}

imports:
  - name: common.py
    path: common/common.py
  - name: default.py
    path: common/default.py
  - name: password.py
    path: common/password.py
  - name: path_utils.jinja
    path: common/path_utils.jinja

  {if $waiterSpec}
  - name: software_status.py
    path: common/software_status.py
  {if $waiterSpec.script}
  - name: software_status_script.py
    path: common/software_status_script.py
  {/if}
  {/if}

  - name: vm_instance.py
    path: common/vm_instance.py

{\n}
info:
  {if $templateVersion}
  version: {$templateVersion |yamlprimitive: 2}
  {else}
  version: '1.0'
  {/if}
  {if $solutionInfo}
  title: {$solutionInfo.name + ' Template' |yamlprimitive: 2}
  {else}
  title: {$solutionId + ' template' |yamlprimitive: 2}
  {/if}

{\n}
required:
  - zone
  - machineType
  - network
  - bootDiskType
  - bootDiskSizeGb
  {let $deployInputRequiredList kind="text"}
    {call renders.deployInputRequiredSchema}{param inputSpec: $spec.deployInput/}{/call}
  {/let}
  {$deployInputRequiredList |indent: 2, true}{nil}

{\n}
properties:
  {let $zoneProp kind="text"}
    {call renders.zonePropertySchema}
      {param name: 'zone'/}
      {param zoneSpec: $spec.zone/}
    {/call}
  {/let}
  {$zoneProp |indent: 2, true}{nil}

  {if length($spec.imagesList) > 1}
  {let $imageProp kind="text"}
    {call renders.imagePropertySchema}
      {param name: 'image'/}
      {param imagesList: $spec.imagesList/}
    {/call}
  {/let}
  {$imageProp |indent: 2, true}{nil}
  {/if}

  {let $machineTypeProp kind="text"}
    {call renders.machineTypePropertySchema}
      {param name: 'machineType'/}
      {param spec: $spec.machineType/}
    {/call}
  {/let}
  {$machineTypeProp |indent: 2, true}{nil}

  {if solutionHasGpus($spec)}
  {let $acceleratorProps kind="text"}
    {call renders.acceleratorPropertiesSchema}
      {param namePrefix: 'accelerator'/}
      {param spec: $spec.acceleratorsList[0]/}
    {/call}
  {/let}
  {$acceleratorProps |indent: 2, true}{nil}
  {/if}

  {let $networkProps kind="text"}
    {call renders.networkPropertiesSchema}
      {param nameSuffix: 'network'/}
      {param zonePropertyName: 'zone'/}
      {param spec: $spec.networkInterfaces/}
    {/call}
  {/let}
  {$networkProps |indent: 2, true}{nil}

  {if $spec.ipForwarding}
  {let $ipForwardingProp kind="text"}
    {call renders.ipForwardingPropertySchema}
      {param name: 'ipForward'/}
      {param spec: $spec.ipForwarding/}
    {/call}
  {/let}
  {$ipForwardingProp |indent: 2, true}{nil}
  {/if}

  {for $scope in $spec.gcpAuthScopesList}
  {call utilities.gcpAuthScopePropertyName}{param spec: $scope/}{/call}:
    type: boolean
    default: {if $scope.defaultOff}False{else}True{/if}
  {/for}

  {let $bootDiskProps kind="text"}
    {call renders.bootDiskPropertiesSchema}
      {param spec: $spec.bootDisk/}
      {param zonePropertyName: 'zone'/}
    {/call}
  {/let}
  {$bootDiskProps |indent: 2, true}{nil}

  {for $disk in $spec.additionalDisksList}
    {let $diskProps kind="text"}
    {call renders.additionalDiskPropertiesSchema}
      {param spec: $spec.additionalDisksList[index($disk)]/}
      {param diskIndex: index($disk)/}
      {param zonePropertyName: 'zone'/}
    {/call}
    {/let}
    {$diskProps |indent: 2, true}{nil}
  {/for}

  {for $firewallRule in $spec.firewallRulesList}
  {let $firewallProp kind="text"}{call renders.firewallProps}{param spec: $firewallRule/}{/call}{/let}
  {$firewallProp |indent: 2, true}{nil}
  {/for}

  {if $spec.deployInput}
  {let $deployInputProps kind="text"}
    {call renders.deployInputPropertiesSchema}
      {param inputSpec: $spec.deployInput/}
    {/call}
  {/let}
  {$deployInputProps |indent: 2, true}{nil}
  {/if}

  {if $spec.stackdriver}
  {let $stackdriverPropertiesSchema kind="text"}
    {call renders.stackdriverPropertiesSchema}
      {param stackdriver: $spec.stackdriver/}
    {/call}
  {/let}
  {$stackdriverPropertiesSchema |indent: 2, true}{nil}
  {/if}

{\n}
outputs:
  deployment:
    type: string
  {for $password in $spec.passwordsList}
  password{index($password)}:
    type: string
  {/for}
  project:
    type: string
  vmId:
    type: string
  vmExternalIP:
    type: string
  vmInternalIP:
    type: string
  vmName:
    type: string
  vmSelfLink:
    type: string
  {if $enableLegacyStatus}
  x-status-type:
    type: string
  x-status-instance:
    type: string
  {/if}

{/template}
