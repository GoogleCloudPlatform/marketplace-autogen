{namespace vm.single.schema}

import {ApplicationStatusSpec,SingleVmDeploymentPackageSpec} from 'java/com/google/cloud/deploymentmanager/autogen/deployment_package_autogen_spec.proto';
import {SolutionMarketingInfo} from 'java/com/google/cloud/deploymentmanager/autogen/marketing_info.proto';
import * as renders from 'com/google/cloud/deploymentmanager/autogen/templates/renders.soy';
import * as utilities from 'com/google/cloud/deploymentmanager/autogen/templates/utilities.soy';

/** Generates solution.jinja.schema file. */
{template main kind="text"}
{@param solutionId: string}
{@param spec: SingleVmDeploymentPackageSpec}
{@param? solutionInfo: SolutionMarketingInfo}
{@param? templateVersion: string}

{let $waiterSpec:
    ($spec.getApplicationStatus()?.getType() == ApplicationStatusSpec.StatusType.WAITER)
    ? $spec.getApplicationStatus()!.getWaiter() : null/}
{let $enableLegacyStatus:
    $spec.getApplicationStatus()?.getType() == ApplicationStatusSpec.StatusType.LEGACY_DETECTOR/}

imports:
  - name: common.py
    path: common/common.py
  - name: default.py
    path: common/default.py
  - name: password.py
    path: common/password.py
  - name: path_utils.jinja
    path: common/path_utils.jinja

  {if $waiterSpec}
  - name: software_status.py
    path: common/software_status.py
  {if $waiterSpec.getScript()}
  - name: software_status_script.py
    path: common/software_status_script.py
  {/if}
  {/if}

  - name: vm_instance.py
    path: common/vm_instance.py

{\n}
info:
  {if $templateVersion}
  version: {$templateVersion |yamlprimitive: 2}
  {else}
  version: '1.0'
  {/if}
  {if $solutionInfo}
  title: {$solutionInfo.getName() + ' Template' |yamlprimitive: 2}
  {else}
  title: {$solutionId + ' template' |yamlprimitive: 2}
  {/if}

{\n}
required:
  - zone
  - machineType
  - network
  - bootDiskType
  - bootDiskSizeGb
  {let $deployInputRequiredList kind="text"}
    {call renders.deployInputRequiredSchema}{param inputSpec: $spec.getDeployInput()/}{/call}
  {/let}
  {$deployInputRequiredList |indent: 2, true}{nil}

{\n}
properties:
  {let $zoneProp kind="text"}
    {call renders.zonePropertySchema}
      {param name: 'zone'/}
      {param zoneSpec: $spec.getZone()/}
    {/call}
  {/let}
  {$zoneProp |indent: 2, true}{nil}

  {let $imageProp kind="text"}
    {call renders.imagePropertySchema}
      {param name: 'image'/}
      {param imagesList: $spec.getImagesList() /}
    {/call}
  {/let}
  {$imageProp |indent: 2, true}{nil}

  {let $machineTypeProp kind="text"}
    {call renders.machineTypePropertySchema}
      {param name: 'machineType'/}
      {param spec: $spec.getMachineType()! /}
    {/call}
  {/let}
  {$machineTypeProp |indent: 2, true}{nil}

  {if solutionHasGpus($spec)}
  {let $acceleratorProps kind="text"}
    {call renders.acceleratorPropertiesSchema}
      {param namePrefix: 'accelerator'/}
      {param spec: $spec.getAcceleratorsList()[0] /}
    {/call}
  {/let}
  {$acceleratorProps |indent: 2, true}{nil}
  {/if}

  {let $networkProps kind="text"}
    {call renders.networkPropertiesSchema}
      {param nameSuffix: 'network'/}
      {param zonePropertyName: 'zone'/}
      {param spec: $spec.getNetworkInterfaces()! /}
    {/call}
  {/let}
  {$networkProps |indent: 2, true}{nil}

  {if $spec.getIpForwarding()}
  {let $ipForwardingProp kind="text"}
    {call renders.ipForwardingPropertySchema}
      {param name: 'ipForward'/}
      {param spec: $spec.getIpForwarding()/}
    {/call}
  {/let}
  {$ipForwardingProp |indent: 2, true}{nil}
  {/if}

  {for $scope in $spec.getGcpAuthScopesList()}
  {call utilities.gcpAuthScopePropertyName}{param spec: $scope/}{/call}:
    type: boolean
    default: {if $scope.getDefaultOff()}False{else}True{/if}
  {/for}

  {let $bootDiskProps kind="text"}
    {call renders.bootDiskPropertiesSchema}
      {param spec: $spec.getBootDisk()! /}
      {param zonePropertyName: 'zone'/}
    {/call}
  {/let}
  {$bootDiskProps |indent: 2, true}{nil}

  {for $disk, $index in $spec.getAdditionalDisksList()}
    {let $diskProps kind="text"}
    {call renders.additionalDiskPropertiesSchema}
      {param spec: $spec.getAdditionalDisksList()[$index] /}
      {param diskIndex: $index/}
      {param zonePropertyName: 'zone'/}
    {/call}
    {/let}
    {$diskProps |indent: 2, true}{nil}
  {/for}

  {for $firewallRule in $spec.getFirewallRulesList()}
  {let $firewallProp kind="text"}{call renders.firewallProps}{param spec: $firewallRule/}{/call}{/let}
  {$firewallProp |indent: 2, true}{nil}
  {/for}

  {if $spec.getDeployInput()}
  {let $deployInputProps kind="text"}
    {call renders.deployInputPropertiesSchema}
      {param inputSpec: $spec.getDeployInput()/}
    {/call}
  {/let}
  {$deployInputProps |indent: 2, true}{nil}
  {/if}

  {if $spec.getStackdriver()}
  {let $stackdriverPropertiesSchema kind="text"}
    {call renders.stackdriverPropertiesSchema}
      {param stackdriver: $spec.getStackdriver()/}
    {/call}
  {/let}
  {$stackdriverPropertiesSchema |indent: 2, true}{nil}
  {/if}

{\n}
outputs:
  deployment:
    type: string
  {for $password, $index in $spec.getPasswordsList()}
  password{$index}:
    type: string
  {/for}
  project:
    type: string
  vmId:
    type: string
  vmExternalIP:
    type: string
  vmInternalIP:
    type: string
  vmName:
    type: string
  vmSelfLink:
    type: string
  {if $enableLegacyStatus}
  x-status-type:
    type: string
  x-status-instance:
    type: string
  {/if}

{/template}
